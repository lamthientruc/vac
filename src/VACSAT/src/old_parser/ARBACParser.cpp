/** \file
 *  This C source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g
 *     -                            On : 2017-04-27 18:04:22
 *     -                for the parser : ARBACParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "ARBACParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pARBACParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pARBACParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pARBACParser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pARBACParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */

#undef	    PARSER
#undef	    RECOGNIZER
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO
#undef		DBG

#define	    PARSER				ctx->pParser
#define	    RECOGNIZER				PARSER->rec
#define	    PSRSTATE				RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)			RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT				PARSER->tstream
#define	    STRSTREAM				INPUT
#define	    ISTREAM				INPUT->istream
#define	    INDEX()				ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()			(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				PSRSTATE->exception
#define	    MATCHT(t, fs)			RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()				RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK				PSRSTATE->following
#ifdef  SKIP_FOLLOW_SETS
#define	    FOLLOWPUSH(x)
#define	    FOLLOWPOP()
#else
#define	    FOLLOWPUSH(x)			FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()				FOLLOWSTACK->pop(FOLLOWSTACK)
#endif
#define	    PRECOVER()				RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()			RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)				INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)				INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()				ISTREAM->consume(ISTREAM)
#define	    MARK()				ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define	    SEEK(n)				ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY			PSRSTATE->errorRecovery
#define	    FAILEDFLAG				PSRSTATE->failed
#define	    HASFAILED()				(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING			PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   ARBACParserTokenNames[23+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>",
        (pANTLR3_UINT8) "<UP>",
        (pANTLR3_UINT8) "COMMA",
        (pANTLR3_UINT8) "CONJUNCTION",
        (pANTLR3_UINT8) "ID",
        (pANTLR3_UINT8) "LANGLE",
        (pANTLR3_UINT8) "NOT",
        (pANTLR3_UINT8) "RANGLE",
        (pANTLR3_UINT8) "SEMI",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "'ADMIN'",
        (pANTLR3_UINT8) "'CA'",
        (pANTLR3_UINT8) "'CR'",
        (pANTLR3_UINT8) "'FALSE'",
        (pANTLR3_UINT8) "'HIERARCHY'",
        (pANTLR3_UINT8) "'NEW'",
        (pANTLR3_UINT8) "'NEWUSERS'",
        (pANTLR3_UINT8) "'Newusers'",
        (pANTLR3_UINT8) "'ROLES'",
        (pANTLR3_UINT8) "'Roles'",
        (pANTLR3_UINT8) "'SPEC'",
        (pANTLR3_UINT8) "'TRUE'",
        (pANTLR3_UINT8) "'UA'",
        (pANTLR3_UINT8) "'USERS'",
        (pANTLR3_UINT8) "'Users'"
       };



// Forward declare the locally static matching functions we have generated.
//
static 
 void
	parse    (pARBACParser ctx);
static 
 void
	node    (pARBACParser ctx);
static 
 void
	roles    (pARBACParser ctx);
static 
 void
	users    (pARBACParser ctx);
static 
 void
	newusers    (pARBACParser ctx);
static 
 void
	predifinedroles    (pARBACParser ctx);
static 
 void
	role    (pARBACParser ctx);
static 
 void
	ua    (pARBACParser ctx);
static 
 void
	hierarchies    (pARBACParser ctx);
static 
 void
	cr    (pARBACParser ctx);
static 
 void
	ca    (pARBACParser ctx);
static 
 void
	ca_entry    (pARBACParser ctx);
static 
 void
	precondition    (pARBACParser ctx);
static 
 void
	atom    (pARBACParser ctx);
static 
 void
	admin    (pARBACParser ctx);
static 
 void
	spec    (pARBACParser ctx);
static 
 void
	spec_tail    (pARBACParser ctx);
static void	ARBACParserFree(pARBACParser ctx);
static void     ARBACParserReset (pARBACParser ctx);

/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed.
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "/home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new ARBACParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pARBACParser
ARBACParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return ARBACParserNewSSD(instream, NULL);
}

/** \brief Create a new ARBACParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pARBACParser
ARBACParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pARBACParser ctx;	    /* Context structure we will build and return   */

    ctx	= (pARBACParser) ANTLR3_CALLOC(1, sizeof(ARBACParser));

    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in ARBACParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our ARBACParser interface
     */
    ctx->parse	= parse;
    ctx->node	= node;
    ctx->roles	= roles;
    ctx->users	= users;
    ctx->newusers	= newusers;
    ctx->predifinedroles	= predifinedroles;
    ctx->role	= role;
    ctx->ua	= ua;
    ctx->hierarchies	= hierarchies;
    ctx->cr	= cr;
    ctx->ca	= ca;
    ctx->ca_entry	= ca_entry;
    ctx->precondition	= precondition;
    ctx->atom	= atom;
    ctx->admin	= admin;
    ctx->spec	= spec;
    ctx->spec_tail	= spec_tail;
    ctx->free			= ARBACParserFree;
    ctx->reset			= ARBACParserReset;
    ctx->getGrammarFileName	= getGrammarFileName;

    /* Install the scope pushing methods.
     */

    /* Install the token table
     */
    PSRSTATE->tokenNames   = ARBACParserTokenNames;


    /* Return the newly built parser to the caller
     */
    return  ctx;
}

static void
ARBACParserReset (pARBACParser ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** Free the parser resources
 */
 static void
 ARBACParserFree(pARBACParser ctx)
 {
    /* Free any scope memory
     */

	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);


    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames()
{
        return ARBACParserTokenNames;
}


      static int
      member_of(int * array, int array_size, int ele)
      {
        int i;
        if(array_size == 0)
        {
          return -1;
        }
        for(i = array_size-1; i >=0; i--)
        {
          if(array[i] == ele)
          {
            return i;
          }
        }
        return -1;
      }


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: FOLLOW_node_in_parse55  */
static	ANTLR3_BITWORD FOLLOW_node_in_parse55_bits[]	= { ANTLR3_UINT64_LIT(0x00000000077D7002) };
static  ANTLR3_BITSET_LIST FOLLOW_node_in_parse55	= { FOLLOW_node_in_parse55_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_roles_in_node64  */
static	ANTLR3_BITWORD FOLLOW_roles_in_node64_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_roles_in_node64	= { FOLLOW_roles_in_node64_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_users_in_node68  */
static	ANTLR3_BITWORD FOLLOW_users_in_node68_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_users_in_node68	= { FOLLOW_users_in_node68_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_newusers_in_node72  */
static	ANTLR3_BITWORD FOLLOW_newusers_in_node72_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_newusers_in_node72	= { FOLLOW_newusers_in_node72_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ua_in_node76  */
static	ANTLR3_BITWORD FOLLOW_ua_in_node76_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ua_in_node76	= { FOLLOW_ua_in_node76_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_hierarchies_in_node80  */
static	ANTLR3_BITWORD FOLLOW_hierarchies_in_node80_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_hierarchies_in_node80	= { FOLLOW_hierarchies_in_node80_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cr_in_node84  */
static	ANTLR3_BITWORD FOLLOW_cr_in_node84_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_cr_in_node84	= { FOLLOW_cr_in_node84_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ca_in_node88  */
static	ANTLR3_BITWORD FOLLOW_ca_in_node88_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ca_in_node88	= { FOLLOW_ca_in_node88_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_admin_in_node92  */
static	ANTLR3_BITWORD FOLLOW_admin_in_node92_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_admin_in_node92	= { FOLLOW_admin_in_node92_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_spec_in_node96  */
static	ANTLR3_BITWORD FOLLOW_spec_in_node96_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_spec_in_node96	= { FOLLOW_spec_in_node96_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_roles104  */
static	ANTLR3_BITWORD FOLLOW_set_in_roles104_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000440) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_roles104	= { FOLLOW_set_in_roles104_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_roles113  */
static	ANTLR3_BITWORD FOLLOW_ID_in_roles113_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000440) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_roles113	= { FOLLOW_ID_in_roles113_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMI_in_roles118  */
static	ANTLR3_BITWORD FOLLOW_SEMI_in_roles118_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMI_in_roles118	= { FOLLOW_SEMI_in_roles118_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_users128  */
static	ANTLR3_BITWORD FOLLOW_set_in_users128_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000440) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_users128	= { FOLLOW_set_in_users128_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_users137  */
static	ANTLR3_BITWORD FOLLOW_ID_in_users137_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000440) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_users137	= { FOLLOW_ID_in_users137_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMI_in_users142  */
static	ANTLR3_BITWORD FOLLOW_SEMI_in_users142_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMI_in_users142	= { FOLLOW_SEMI_in_users142_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_newusers152  */
static	ANTLR3_BITWORD FOLLOW_set_in_newusers152_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000480) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_newusers152	= { FOLLOW_set_in_newusers152_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LANGLE_in_newusers159  */
static	ANTLR3_BITWORD FOLLOW_LANGLE_in_newusers159_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_LANGLE_in_newusers159	= { FOLLOW_LANGLE_in_newusers159_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_newusers163  */
static	ANTLR3_BITWORD FOLLOW_ID_in_newusers163_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_newusers163	= { FOLLOW_ID_in_newusers163_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_newusers166  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_newusers166_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_newusers166	= { FOLLOW_COMMA_in_newusers166_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_predifinedroles_in_newusers168  */
static	ANTLR3_BITWORD FOLLOW_predifinedroles_in_newusers168_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_predifinedroles_in_newusers168	= { FOLLOW_predifinedroles_in_newusers168_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RANGLE_in_newusers170  */
static	ANTLR3_BITWORD FOLLOW_RANGLE_in_newusers170_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000480) };
static  ANTLR3_BITSET_LIST FOLLOW_RANGLE_in_newusers170	= { FOLLOW_RANGLE_in_newusers170_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMI_in_newusers174  */
static	ANTLR3_BITWORD FOLLOW_SEMI_in_newusers174_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMI_in_newusers174	= { FOLLOW_SEMI_in_newusers174_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_role_in_predifinedroles183  */
static	ANTLR3_BITWORD FOLLOW_role_in_predifinedroles183_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000022) };
static  ANTLR3_BITSET_LIST FOLLOW_role_in_predifinedroles183	= { FOLLOW_role_in_predifinedroles183_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONJUNCTION_in_predifinedroles186  */
static	ANTLR3_BITWORD FOLLOW_CONJUNCTION_in_predifinedroles186_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_CONJUNCTION_in_predifinedroles186	= { FOLLOW_CONJUNCTION_in_predifinedroles186_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_role_in_predifinedroles188  */
static	ANTLR3_BITWORD FOLLOW_role_in_predifinedroles188_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000022) };
static  ANTLR3_BITSET_LIST FOLLOW_role_in_predifinedroles188	= { FOLLOW_role_in_predifinedroles188_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_role199  */
static	ANTLR3_BITWORD FOLLOW_ID_in_role199_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_role199	= { FOLLOW_ID_in_role199_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_24_in_ua208  */
static	ANTLR3_BITWORD FOLLOW_24_in_ua208_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000480) };
static  ANTLR3_BITSET_LIST FOLLOW_24_in_ua208	= { FOLLOW_24_in_ua208_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LANGLE_in_ua211  */
static	ANTLR3_BITWORD FOLLOW_LANGLE_in_ua211_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_LANGLE_in_ua211	= { FOLLOW_LANGLE_in_ua211_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_ua217  */
static	ANTLR3_BITWORD FOLLOW_ID_in_ua217_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_ua217	= { FOLLOW_ID_in_ua217_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_ua220  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_ua220_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_ua220	= { FOLLOW_COMMA_in_ua220_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_ua224  */
static	ANTLR3_BITWORD FOLLOW_ID_in_ua224_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_ua224	= { FOLLOW_ID_in_ua224_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RANGLE_in_ua227  */
static	ANTLR3_BITWORD FOLLOW_RANGLE_in_ua227_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000480) };
static  ANTLR3_BITSET_LIST FOLLOW_RANGLE_in_ua227	= { FOLLOW_RANGLE_in_ua227_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMI_in_ua231  */
static	ANTLR3_BITWORD FOLLOW_SEMI_in_ua231_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMI_in_ua231	= { FOLLOW_SEMI_in_ua231_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_16_in_hierarchies240  */
static	ANTLR3_BITWORD FOLLOW_16_in_hierarchies240_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000480) };
static  ANTLR3_BITSET_LIST FOLLOW_16_in_hierarchies240	= { FOLLOW_16_in_hierarchies240_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LANGLE_in_hierarchies243  */
static	ANTLR3_BITWORD FOLLOW_LANGLE_in_hierarchies243_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_LANGLE_in_hierarchies243	= { FOLLOW_LANGLE_in_hierarchies243_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_hierarchies249  */
static	ANTLR3_BITWORD FOLLOW_ID_in_hierarchies249_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_hierarchies249	= { FOLLOW_ID_in_hierarchies249_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_hierarchies252  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_hierarchies252_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_hierarchies252	= { FOLLOW_COMMA_in_hierarchies252_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_hierarchies256  */
static	ANTLR3_BITWORD FOLLOW_ID_in_hierarchies256_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_hierarchies256	= { FOLLOW_ID_in_hierarchies256_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RANGLE_in_hierarchies259  */
static	ANTLR3_BITWORD FOLLOW_RANGLE_in_hierarchies259_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000480) };
static  ANTLR3_BITSET_LIST FOLLOW_RANGLE_in_hierarchies259	= { FOLLOW_RANGLE_in_hierarchies259_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMI_in_hierarchies263  */
static	ANTLR3_BITWORD FOLLOW_SEMI_in_hierarchies263_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMI_in_hierarchies263	= { FOLLOW_SEMI_in_hierarchies263_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_14_in_cr272  */
static	ANTLR3_BITWORD FOLLOW_14_in_cr272_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000480) };
static  ANTLR3_BITSET_LIST FOLLOW_14_in_cr272	= { FOLLOW_14_in_cr272_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LANGLE_in_cr275  */
static	ANTLR3_BITWORD FOLLOW_LANGLE_in_cr275_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000008040) };
static  ANTLR3_BITSET_LIST FOLLOW_LANGLE_in_cr275	= { FOLLOW_LANGLE_in_cr275_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_cr282  */
static	ANTLR3_BITWORD FOLLOW_ID_in_cr282_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_cr282	= { FOLLOW_ID_in_cr282_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_cr286  */
static	ANTLR3_BITWORD FOLLOW_15_in_cr286_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_cr286	= { FOLLOW_15_in_cr286_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_cr290  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_cr290_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_cr290	= { FOLLOW_COMMA_in_cr290_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_cr294  */
static	ANTLR3_BITWORD FOLLOW_ID_in_cr294_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_cr294	= { FOLLOW_ID_in_cr294_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RANGLE_in_cr297  */
static	ANTLR3_BITWORD FOLLOW_RANGLE_in_cr297_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000480) };
static  ANTLR3_BITSET_LIST FOLLOW_RANGLE_in_cr297	= { FOLLOW_RANGLE_in_cr297_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMI_in_cr301  */
static	ANTLR3_BITWORD FOLLOW_SEMI_in_cr301_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMI_in_cr301	= { FOLLOW_SEMI_in_cr301_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_13_in_ca310  */
static	ANTLR3_BITWORD FOLLOW_13_in_ca310_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000480) };
static  ANTLR3_BITSET_LIST FOLLOW_13_in_ca310	= { FOLLOW_13_in_ca310_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ca_entry_in_ca315  */
static	ANTLR3_BITWORD FOLLOW_ca_entry_in_ca315_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000480) };
static  ANTLR3_BITSET_LIST FOLLOW_ca_entry_in_ca315	= { FOLLOW_ca_entry_in_ca315_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMI_in_ca319  */
static	ANTLR3_BITWORD FOLLOW_SEMI_in_ca319_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMI_in_ca319	= { FOLLOW_SEMI_in_ca319_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LANGLE_in_ca_entry328  */
static	ANTLR3_BITWORD FOLLOW_LANGLE_in_ca_entry328_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_LANGLE_in_ca_entry328	= { FOLLOW_LANGLE_in_ca_entry328_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_ca_entry332  */
static	ANTLR3_BITWORD FOLLOW_ID_in_ca_entry332_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_ca_entry332	= { FOLLOW_ID_in_ca_entry332_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_ca_entry359  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_ca_entry359_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000820140) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_ca_entry359	= { FOLLOW_COMMA_in_ca_entry359_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_precondition_in_ca_entry361  */
static	ANTLR3_BITWORD FOLLOW_precondition_in_ca_entry361_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_precondition_in_ca_entry361	= { FOLLOW_precondition_in_ca_entry361_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_ca_entry363  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_ca_entry363_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_ca_entry363	= { FOLLOW_COMMA_in_ca_entry363_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_ca_entry367  */
static	ANTLR3_BITWORD FOLLOW_ID_in_ca_entry367_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_ca_entry367	= { FOLLOW_ID_in_ca_entry367_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RANGLE_in_ca_entry370  */
static	ANTLR3_BITWORD FOLLOW_RANGLE_in_ca_entry370_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RANGLE_in_ca_entry370	= { FOLLOW_RANGLE_in_ca_entry370_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_atom_in_precondition397  */
static	ANTLR3_BITWORD FOLLOW_atom_in_precondition397_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000022) };
static  ANTLR3_BITSET_LIST FOLLOW_atom_in_precondition397	= { FOLLOW_atom_in_precondition397_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONJUNCTION_in_precondition400  */
static	ANTLR3_BITWORD FOLLOW_CONJUNCTION_in_precondition400_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000140) };
static  ANTLR3_BITSET_LIST FOLLOW_CONJUNCTION_in_precondition400	= { FOLLOW_CONJUNCTION_in_precondition400_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_atom_in_precondition402  */
static	ANTLR3_BITWORD FOLLOW_atom_in_precondition402_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000022) };
static  ANTLR3_BITSET_LIST FOLLOW_atom_in_precondition402	= { FOLLOW_atom_in_precondition402_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_23_in_precondition422  */
static	ANTLR3_BITWORD FOLLOW_23_in_precondition422_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_23_in_precondition422	= { FOLLOW_23_in_precondition422_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_17_in_precondition456  */
static	ANTLR3_BITWORD FOLLOW_17_in_precondition456_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_17_in_precondition456	= { FOLLOW_17_in_precondition456_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_in_atom498  */
static	ANTLR3_BITWORD FOLLOW_NOT_in_atom498_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_in_atom498	= { FOLLOW_NOT_in_atom498_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_atom505  */
static	ANTLR3_BITWORD FOLLOW_ID_in_atom505_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_atom505	= { FOLLOW_ID_in_atom505_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_12_in_admin515  */
static	ANTLR3_BITWORD FOLLOW_12_in_admin515_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000440) };
static  ANTLR3_BITSET_LIST FOLLOW_12_in_admin515	= { FOLLOW_12_in_admin515_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_admin520  */
static	ANTLR3_BITWORD FOLLOW_ID_in_admin520_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000440) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_admin520	= { FOLLOW_ID_in_admin520_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMI_in_admin525  */
static	ANTLR3_BITWORD FOLLOW_SEMI_in_admin525_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMI_in_admin525	= { FOLLOW_SEMI_in_admin525_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_22_in_spec533  */
static	ANTLR3_BITWORD FOLLOW_22_in_spec533_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_22_in_spec533	= { FOLLOW_22_in_spec533_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_spec537  */
static	ANTLR3_BITWORD FOLLOW_ID_in_spec537_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000440) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_spec537	= { FOLLOW_ID_in_spec537_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_spec_tail_in_spec540  */
static	ANTLR3_BITWORD FOLLOW_spec_tail_in_spec540_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_spec_tail_in_spec540	= { FOLLOW_spec_tail_in_spec540_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_spec_tail553  */
static	ANTLR3_BITWORD FOLLOW_ID_in_spec_tail553_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_spec_tail553	= { FOLLOW_ID_in_spec_tail553_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMI_in_spec_tail564  */
static	ANTLR3_BITWORD FOLLOW_SEMI_in_spec_tail564_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMI_in_spec_tail564	= { FOLLOW_SEMI_in_spec_tail564_bits, 1	};


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start parse
 * /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:43:1: parse : ( node )+ ;
 */
static void
parse(pARBACParser ctx)
{
    /* Initialize rule variables
     */


              /* Initialize all variables of RBAC system */
              role_array = 0;
              role_array_size = 0;
              user_array = 0;
              user_array_size = 0;
              newuser_array = 0;
              newuser_array_size = 0;
              ua_array = 0;
              ua_array_size = 0;
              hierarchy_array = 0;
              hierarchy_array_size = 0;
              cr_array = 0;
              cr_array_size = 0;
              ca_array = 0;
              ca_array_size = 0;
              admin_array_index = 0;
              admin_array_index_size = 0;
              admin_role_array_index = 0;
              admin_role_array_index_size = 0;
              goal_user_index = -13;
              goal_role_index = -1;
              goal_temp = 0;
              iNeg = 0;
              hasNewUserMode = 0;
              hasGoalUserMode = 0;
              goalUserIsNew = 0;
              
    {
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:71:8: ( ( node )+ )
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:71:10: ( node )+
        {
            // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:71:10: ( node )+
            {
                int cnt1=0;

                for (;;)
                {
                    int alt1=2;
            	switch ( LA(1) )
            	{
            	case 12:
            	case 13:
            	case 14:
            	case 16:
            	case 18:
            	case 19:
            	case 20:
            	case 21:
            	case 22:
            	case 24:
            	case 25:
            	case 26:
            		{
            			alt1=1;
            		}
            	    break;

            	}

            	switch (alt1)
            	{
            	    case 1:
            	        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:71:10: node
            	        {
            	            FOLLOWPUSH(FOLLOW_node_in_parse55);
            	            node(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleparseEx;
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt1 >= 1 )
            		{
            		    goto loop1;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto ruleparseEx;
            	}
            	cnt1++;
                }
                loop1: ;	/* Jump to here if this rule does not match */
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruleparseEx; /* Prevent compiler warnings */
    ruleparseEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end parse */

/**
 * $ANTLR start node
 * /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:73:1: node : ( roles | users | newusers | ua | hierarchies | cr | ca | admin | spec );
 */
static void
node(pARBACParser ctx)
{
    /* Initialize rule variables
     */

    {
        {
            //  /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:73:6: ( roles | users | newusers | ua | hierarchies | cr | ca | admin | spec )

            ANTLR3_UINT32 alt2;

            alt2=9;

            switch ( LA(1) )
            {
            case 20:
            case 21:
            	{
            		alt2=1;
            	}
                break;
            case 25:
            case 26:
            	{
            		alt2=2;
            	}
                break;
            case 18:
            case 19:
            	{
            		alt2=3;
            	}
                break;
            case 24:
            	{
            		alt2=4;
            	}
                break;
            case 16:
            	{
            		alt2=5;
            	}
                break;
            case 14:
            	{
            		alt2=6;
            	}
                break;
            case 13:
            	{
            		alt2=7;
            	}
                break;
            case 12:
            	{
            		alt2=8;
            	}
                break;
            case 22:
            	{
            		alt2=9;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 2;
                EXCEPTION->state        = 0;


                goto rulenodeEx;

            }

            switch (alt2)
            {
        	case 1:
        	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:73:8: roles
        	    {
        	        FOLLOWPUSH(FOLLOW_roles_in_node64);
        	        roles(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenodeEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:73:16: users
        	    {
        	        FOLLOWPUSH(FOLLOW_users_in_node68);
        	        users(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenodeEx;
        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:73:24: newusers
        	    {
        	        FOLLOWPUSH(FOLLOW_newusers_in_node72);
        	        newusers(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenodeEx;
        	        }


        	    }
        	    break;
        	case 4:
        	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:73:35: ua
        	    {
        	        FOLLOWPUSH(FOLLOW_ua_in_node76);
        	        ua(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenodeEx;
        	        }


        	    }
        	    break;
        	case 5:
        	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:73:40: hierarchies
        	    {
        	        FOLLOWPUSH(FOLLOW_hierarchies_in_node80);
        	        hierarchies(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenodeEx;
        	        }


        	    }
        	    break;
        	case 6:
        	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:73:54: cr
        	    {
        	        FOLLOWPUSH(FOLLOW_cr_in_node84);
        	        cr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenodeEx;
        	        }


        	    }
        	    break;
        	case 7:
        	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:73:59: ca
        	    {
        	        FOLLOWPUSH(FOLLOW_ca_in_node88);
        	        ca(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenodeEx;
        	        }


        	    }
        	    break;
        	case 8:
        	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:73:64: admin
        	    {
        	        FOLLOWPUSH(FOLLOW_admin_in_node92);
        	        admin(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenodeEx;
        	        }


        	    }
        	    break;
        	case 9:
        	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:73:72: spec
        	    {
        	        FOLLOWPUSH(FOLLOW_spec_in_node96);
        	        spec(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenodeEx;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulenodeEx; /* Prevent compiler warnings */
    rulenodeEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end node */

/**
 * $ANTLR start roles
 * /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:75:1: roles : ( 'Roles' | 'ROLES' ) (id= ID )* SEMI ;
 */
static void
roles(pARBACParser ctx)
{
    pANTLR3_COMMON_TOKEN    id;

    /* Initialize rule variables
     */

    id       = NULL;

    {
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:75:7: ( ( 'Roles' | 'ROLES' ) (id= ID )* SEMI )
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:75:9: ( 'Roles' | 'ROLES' ) (id= ID )* SEMI
        {
            if ( ((LA(1) >= 20) && (LA(1) <= 21)) )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto rulerolesEx;
            }


            // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:75:27: (id= ID )*

            for (;;)
            {
                int alt3=2;
                switch ( LA(1) )
                {
                case ID:
                	{
                		alt3=1;
                	}
                    break;

                }

                switch (alt3)
                {
            	case 1:
            	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:75:28: id= ID
            	    {
            	        id = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_roles113);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerolesEx;
            	        }


            	        {

            	                                    role_array_size++;
            	                                    role_array = (char **) realloc(role_array, role_array_size*sizeof(char*));
            	                                    role_array[role_array_size-1] = (char *) malloc(strlen((char *)(id->getText(id))->chars)+1);
            	                                    strcpy(role_array[role_array_size-1], (char *)(id->getText(id))->chars);
            	                                  
            	        }


            	    }
            	    break;

            	default:
            	    goto loop3;	/* break out of the loop */
            	    break;
                }
            }
            loop3: ; /* Jump out to here if this rule does not match */


             MATCHT(SEMI, &FOLLOW_SEMI_in_roles118);
            if  (HASEXCEPTION())
            {
                goto rulerolesEx;
            }


            {

                                      	create_role_dict();
                                      
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulerolesEx; /* Prevent compiler warnings */
    rulerolesEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end roles */

/**
 * $ANTLR start users
 * /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:84:1: users : ( 'Users' | 'USERS' ) (id= ID )* SEMI ;
 */
static void
users(pARBACParser ctx)
{
    pANTLR3_COMMON_TOKEN    id;

    /* Initialize rule variables
     */

    id       = NULL;

    {
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:84:7: ( ( 'Users' | 'USERS' ) (id= ID )* SEMI )
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:84:9: ( 'Users' | 'USERS' ) (id= ID )* SEMI
        {
            if ( ((LA(1) >= 25) && (LA(1) <= 26)) )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto ruleusersEx;
            }


            // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:84:27: (id= ID )*

            for (;;)
            {
                int alt4=2;
                switch ( LA(1) )
                {
                case ID:
                	{
                		alt4=1;
                	}
                    break;

                }

                switch (alt4)
                {
            	case 1:
            	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:84:28: id= ID
            	    {
            	        id = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_users137);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleusersEx;
            	        }


            	        {

            	                                      user_array_size++;
            	                                      user_array = (char **) realloc(user_array, user_array_size*sizeof(char*));
            	                                      user_array[user_array_size-1] = (char *) malloc(strlen((char *)(id->getText(id))->chars)+1);
            	                                      strcpy(user_array[user_array_size-1], (char *)(id->getText(id))->chars);
            	                                  
            	        }


            	    }
            	    break;

            	default:
            	    goto loop4;	/* break out of the loop */
            	    break;
                }
            }
            loop4: ; /* Jump out to here if this rule does not match */


             MATCHT(SEMI, &FOLLOW_SEMI_in_users142);
            if  (HASEXCEPTION())
            {
                goto ruleusersEx;
            }


            {

                                        create_user_dict();
                                      
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleusersEx; /* Prevent compiler warnings */
    ruleusersEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end users */

/**
 * $ANTLR start newusers
 * /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:93:1: newusers : ( 'Newusers' | 'NEWUSERS' ) ( LANGLE id= ID COMMA predifinedroles RANGLE )* SEMI ;
 */
static void
newusers(pARBACParser ctx)
{
    pANTLR3_COMMON_TOKEN    id;

    /* Initialize rule variables
     */

    id       = NULL;

    {
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:93:10: ( ( 'Newusers' | 'NEWUSERS' ) ( LANGLE id= ID COMMA predifinedroles RANGLE )* SEMI )
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:93:12: ( 'Newusers' | 'NEWUSERS' ) ( LANGLE id= ID COMMA predifinedroles RANGLE )* SEMI
        {
            if ( ((LA(1) >= 18) && (LA(1) <= 19)) )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto rulenewusersEx;
            }


            // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:93:36: ( LANGLE id= ID COMMA predifinedroles RANGLE )*

            for (;;)
            {
                int alt5=2;
                switch ( LA(1) )
                {
                case LANGLE:
                	{
                		alt5=1;
                	}
                    break;

                }

                switch (alt5)
                {
            	case 1:
            	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:93:37: LANGLE id= ID COMMA predifinedroles RANGLE
            	    {
            	         MATCHT(LANGLE, &FOLLOW_LANGLE_in_newusers159);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulenewusersEx;
            	        }


            	        id = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_newusers163);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulenewusersEx;
            	        }


            	        {

            	            		          int tmp = find_user_from_dict((char *)(id->getText(id))->chars);
            	            		          if( tmp > -1)
            	            		          {
            	            		          	fprintf(stderr, "error: user %s already defined in USERS list\n", (id->getText(id))->chars);
            	            		          	abort();
            	            		          }
            	                                      newuser_array_size++;
            	                                      newuser_array = (_NEWUSER *) realloc(newuser_array, newuser_array_size*sizeof(_NEWUSER));
            	                                      newuser_array[newuser_array_size-1].name = (char *) malloc(strlen((char *)(id->getText(id))->chars)+1);
            	                                      strcpy(newuser_array[newuser_array_size-1].name, (char *)(id->getText(id))->chars);
            	                                      newuser_array[newuser_array_size-1].role_array_size = 0;
            	                                      newuser_array[newuser_array_size-1].role_array = 0;
            	                                  
            	        }


            	         MATCHT(COMMA, &FOLLOW_COMMA_in_newusers166);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulenewusersEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_predifinedroles_in_newusers168);
            	        predifinedroles(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulenewusersEx;
            	        }


            	         MATCHT(RANGLE, &FOLLOW_RANGLE_in_newusers170);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulenewusersEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop5;	/* break out of the loop */
            	    break;
                }
            }
            loop5: ; /* Jump out to here if this rule does not match */


             MATCHT(SEMI, &FOLLOW_SEMI_in_newusers174);
            if  (HASEXCEPTION())
            {
                goto rulenewusersEx;
            }


            {

                                        create_newuser_dict();
                                        if(newuser_array_size > 0)
                                        {
                                          hasNewUserMode = 1;
                                        }
                                      
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulenewusersEx; /* Prevent compiler warnings */
    rulenewusersEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end newusers */

/**
 * $ANTLR start predifinedroles
 * /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:114:1: predifinedroles : role ( CONJUNCTION role )* ;
 */
static void
predifinedroles(pARBACParser ctx)
{
    /* Initialize rule variables
     */

    {
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:114:16: ( role ( CONJUNCTION role )* )
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:114:18: role ( CONJUNCTION role )*
        {
            FOLLOWPUSH(FOLLOW_role_in_predifinedroles183);
            role(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepredifinedrolesEx;
            }


            // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:114:23: ( CONJUNCTION role )*

            for (;;)
            {
                int alt6=2;
                switch ( LA(1) )
                {
                case CONJUNCTION:
                	{
                		alt6=1;
                	}
                    break;

                }

                switch (alt6)
                {
            	case 1:
            	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:114:24: CONJUNCTION role
            	    {
            	         MATCHT(CONJUNCTION, &FOLLOW_CONJUNCTION_in_predifinedroles186);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepredifinedrolesEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_role_in_predifinedroles188);
            	        role(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepredifinedrolesEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop6;	/* break out of the loop */
            	    break;
                }
            }
            loop6: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulepredifinedrolesEx; /* Prevent compiler warnings */
    rulepredifinedrolesEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end predifinedroles */

/**
 * $ANTLR start role
 * /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:116:1: role : id= ID ;
 */
static void
role(pARBACParser ctx)
{
    pANTLR3_COMMON_TOKEN    id;

    /* Initialize rule variables
     */

    id       = NULL;

    {
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:116:5: (id= ID )
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:116:7: id= ID
        {
            id = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_role199);
            if  (HASEXCEPTION())
            {
                goto ruleroleEx;
            }


            {

                      newuser_array[newuser_array_size-1].role_array_size++;
                      newuser_array[newuser_array_size-1].role_array = (int *) realloc(newuser_array[newuser_array_size-1].role_array, newuser_array[newuser_array_size-1].role_array_size*sizeof(int));
                      newuser_array[newuser_array_size-1].role_array[newuser_array[newuser_array_size-1].role_array_size - 1] = find_role_from_dict((char *)(id->getText(id))->chars);
                                  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleroleEx; /* Prevent compiler warnings */
    ruleroleEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end role */

/**
 * $ANTLR start ua
 * /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:122:1: ua : 'UA' ( LANGLE id1= ID COMMA id2= ID RANGLE )* SEMI ;
 */
static void
ua(pARBACParser ctx)
{
    pANTLR3_COMMON_TOKEN    id1;
    pANTLR3_COMMON_TOKEN    id2;

    /* Initialize rule variables
     */

    id1       = NULL;
    id2       = NULL;

    {
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:122:4: ( 'UA' ( LANGLE id1= ID COMMA id2= ID RANGLE )* SEMI )
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:122:6: 'UA' ( LANGLE id1= ID COMMA id2= ID RANGLE )* SEMI
        {
             MATCHT(24, &FOLLOW_24_in_ua208);
            if  (HASEXCEPTION())
            {
                goto ruleuaEx;
            }


            // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:122:11: ( LANGLE id1= ID COMMA id2= ID RANGLE )*

            for (;;)
            {
                int alt7=2;
                switch ( LA(1) )
                {
                case LANGLE:
                	{
                		alt7=1;
                	}
                    break;

                }

                switch (alt7)
                {
            	case 1:
            	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:122:12: LANGLE id1= ID COMMA id2= ID RANGLE
            	    {
            	         MATCHT(LANGLE, &FOLLOW_LANGLE_in_ua211);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleuaEx;
            	        }


            	        {

            	                                ua_array_size++;
            	                                ua_array = (_UA *) realloc(ua_array, ua_array_size*sizeof(_UA));
            	                              
            	        }


            	        id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_ua217);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleuaEx;
            	        }


            	        {

            	                                ua_array[ua_array_size-1].user_index = find_user_from_dict((char *)(id1->getText(id1))->chars);
            	                              
            	        }


            	         MATCHT(COMMA, &FOLLOW_COMMA_in_ua220);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleuaEx;
            	        }


            	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_ua224);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleuaEx;
            	        }


            	        {

            	                                ua_array[ua_array_size-1].role_index = find_role_from_dict((char *)(id2->getText(id2))->chars);
            	                              
            	        }


            	         MATCHT(RANGLE, &FOLLOW_RANGLE_in_ua227);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleuaEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop7;	/* break out of the loop */
            	    break;
                }
            }
            loop7: ; /* Jump out to here if this rule does not match */


             MATCHT(SEMI, &FOLLOW_SEMI_in_ua231);
            if  (HASEXCEPTION())
            {
                goto ruleuaEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleuaEx; /* Prevent compiler warnings */
    ruleuaEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end ua */

/**
 * $ANTLR start hierarchies
 * /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:131:1: hierarchies : 'HIERARCHY' ( LANGLE id1= ID COMMA id2= ID RANGLE )* SEMI ;
 */
static void
hierarchies(pARBACParser ctx)
{
    pANTLR3_COMMON_TOKEN    id1;
    pANTLR3_COMMON_TOKEN    id2;

    /* Initialize rule variables
     */

    id1       = NULL;
    id2       = NULL;

    {
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:131:13: ( 'HIERARCHY' ( LANGLE id1= ID COMMA id2= ID RANGLE )* SEMI )
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:131:15: 'HIERARCHY' ( LANGLE id1= ID COMMA id2= ID RANGLE )* SEMI
        {
             MATCHT(16, &FOLLOW_16_in_hierarchies240);
            if  (HASEXCEPTION())
            {
                goto rulehierarchiesEx;
            }


            // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:131:27: ( LANGLE id1= ID COMMA id2= ID RANGLE )*

            for (;;)
            {
                int alt8=2;
                switch ( LA(1) )
                {
                case LANGLE:
                	{
                		alt8=1;
                	}
                    break;

                }

                switch (alt8)
                {
            	case 1:
            	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:131:28: LANGLE id1= ID COMMA id2= ID RANGLE
            	    {
            	         MATCHT(LANGLE, &FOLLOW_LANGLE_in_hierarchies243);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulehierarchiesEx;
            	        }


            	        {

            	                                hierarchy_array_size++;
            	                                hierarchy_array = (_PO *) realloc(hierarchy_array, hierarchy_array_size*sizeof(_PO));
            	                              
            	        }


            	        id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_hierarchies249);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulehierarchiesEx;
            	        }


            	        {

            	                                hierarchy_array[hierarchy_array_size-1].inferior_role_index = find_role_from_dict((char *)(id1->getText(id1))->chars);
            	                              
            	        }


            	         MATCHT(COMMA, &FOLLOW_COMMA_in_hierarchies252);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulehierarchiesEx;
            	        }


            	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_hierarchies256);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulehierarchiesEx;
            	        }


            	        {

            	                                hierarchy_array[hierarchy_array_size-1].superior_role_index = find_role_from_dict((char *)(id2->getText(id2))->chars);
            	                              
            	        }


            	         MATCHT(RANGLE, &FOLLOW_RANGLE_in_hierarchies259);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulehierarchiesEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop8;	/* break out of the loop */
            	    break;
                }
            }
            loop8: ; /* Jump out to here if this rule does not match */


             MATCHT(SEMI, &FOLLOW_SEMI_in_hierarchies263);
            if  (HASEXCEPTION())
            {
                goto rulehierarchiesEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulehierarchiesEx; /* Prevent compiler warnings */
    rulehierarchiesEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end hierarchies */

/**
 * $ANTLR start cr
 * /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:140:1: cr : 'CR' ( LANGLE (id1= ID | 'FALSE' ) COMMA id2= ID RANGLE )* SEMI ;
 */
static void
cr(pARBACParser ctx)
{
    pANTLR3_COMMON_TOKEN    id1;
    pANTLR3_COMMON_TOKEN    id2;

    /* Initialize rule variables
     */

    id1       = NULL;
    id2       = NULL;

    {
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:140:4: ( 'CR' ( LANGLE (id1= ID | 'FALSE' ) COMMA id2= ID RANGLE )* SEMI )
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:140:6: 'CR' ( LANGLE (id1= ID | 'FALSE' ) COMMA id2= ID RANGLE )* SEMI
        {
             MATCHT(14, &FOLLOW_14_in_cr272);
            if  (HASEXCEPTION())
            {
                goto rulecrEx;
            }


            // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:140:11: ( LANGLE (id1= ID | 'FALSE' ) COMMA id2= ID RANGLE )*

            for (;;)
            {
                int alt10=2;
                switch ( LA(1) )
                {
                case LANGLE:
                	{
                		alt10=1;
                	}
                    break;

                }

                switch (alt10)
                {
            	case 1:
            	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:140:12: LANGLE (id1= ID | 'FALSE' ) COMMA id2= ID RANGLE
            	    {
            	         MATCHT(LANGLE, &FOLLOW_LANGLE_in_cr275);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecrEx;
            	        }


            	        {

            	                                cr_array_size++;
            	                                cr_array = (_CR *) realloc(cr_array, cr_array_size*sizeof(_CR));
            	                              
            	        }


            	        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:143:21: (id1= ID | 'FALSE' )
            	        {
            	            int alt9=2;
            	            switch ( LA(1) )
            	            {
            	            case ID:
            	            	{
            	            		alt9=1;
            	            	}
            	                break;
            	            case 15:
            	            	{
            	            		alt9=2;
            	            	}
            	                break;

            	            default:
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 9;
            	                EXCEPTION->state        = 0;


            	                goto rulecrEx;

            	            }

            	            switch (alt9)
            	            {
            	        	case 1:
            	        	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:143:22: id1= ID
            	        	    {
            	        	        id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_cr282);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecrEx;
            	        	        }


            	        	        {

            	        	                                cr_array[cr_array_size-1].admin_role_index = find_role_from_dict((char *)(id1->getText(id1))->chars);
            	        	                                if(member_of(admin_role_array_index, admin_role_array_index_size, cr_array[cr_array_size-1].admin_role_index) == -1)
            	        	                                {
            	        	                                  admin_role_array_index_size++;
            	        	                                  admin_role_array_index = (int *) realloc(admin_role_array_index, admin_role_array_index_size*sizeof(int));
            	        	                                  admin_role_array_index[admin_role_array_index_size-1] = cr_array[cr_array_size-1].admin_role_index;
            	        	                                }

            	        	                              
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:152:22: 'FALSE'
            	        	    {
            	        	         MATCHT(15, &FOLLOW_15_in_cr286);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecrEx;
            	        	        }


            	        	        {

            	        	                                cr_array[cr_array_size-1].admin_role_index = -1;
            	        	                              
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	         MATCHT(COMMA, &FOLLOW_COMMA_in_cr290);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecrEx;
            	        }


            	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_cr294);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecrEx;
            	        }


            	        {

            	                                cr_array[cr_array_size-1].target_role_index = find_role_from_dict((char *)(id2->getText(id2))->chars);
            	                              
            	        }


            	         MATCHT(RANGLE, &FOLLOW_RANGLE_in_cr297);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecrEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop10;	/* break out of the loop */
            	    break;
                }
            }
            loop10: ; /* Jump out to here if this rule does not match */


             MATCHT(SEMI, &FOLLOW_SEMI_in_cr301);
            if  (HASEXCEPTION())
            {
                goto rulecrEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulecrEx; /* Prevent compiler warnings */
    rulecrEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end cr */

/**
 * $ANTLR start ca
 * /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:158:1: ca : 'CA' ( ca_entry )* SEMI ;
 */
static void
ca(pARBACParser ctx)
{
    /* Initialize rule variables
     */

    {
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:158:4: ( 'CA' ( ca_entry )* SEMI )
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:158:6: 'CA' ( ca_entry )* SEMI
        {
             MATCHT(13, &FOLLOW_13_in_ca310);
            if  (HASEXCEPTION())
            {
                goto rulecaEx;
            }


            // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:158:11: ( ca_entry )*

            for (;;)
            {
                int alt11=2;
                switch ( LA(1) )
                {
                case LANGLE:
                	{
                		alt11=1;
                	}
                    break;

                }

                switch (alt11)
                {
            	case 1:
            	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:158:12: ca_entry
            	    {
            	        {

            	                          ca_array_size++;
            	                          ca_array = (_CA *) realloc(ca_array, ca_array_size*sizeof(_CA));
            	                          ca_array[ca_array_size-1].type = 0;
            	                       
            	        }


            	        FOLLOWPUSH(FOLLOW_ca_entry_in_ca315);
            	        ca_entry(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop11;	/* break out of the loop */
            	    break;
                }
            }
            loop11: ; /* Jump out to here if this rule does not match */


             MATCHT(SEMI, &FOLLOW_SEMI_in_ca319);
            if  (HASEXCEPTION())
            {
                goto rulecaEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulecaEx; /* Prevent compiler warnings */
    rulecaEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end ca */

/**
 * $ANTLR start ca_entry
 * /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:164:1: ca_entry : LANGLE id1= ID COMMA precondition COMMA id2= ID RANGLE ;
 */
static void
ca_entry(pARBACParser ctx)
{
    pANTLR3_COMMON_TOKEN    id1;
    pANTLR3_COMMON_TOKEN    id2;

    /* Initialize rule variables
     */

    id1       = NULL;
    id2       = NULL;

    {
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:164:10: ( LANGLE id1= ID COMMA precondition COMMA id2= ID RANGLE )
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:164:12: LANGLE id1= ID COMMA precondition COMMA id2= ID RANGLE
        {
             MATCHT(LANGLE, &FOLLOW_LANGLE_in_ca_entry328);
            if  (HASEXCEPTION())
            {
                goto ruleca_entryEx;
            }


            id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_ca_entry332);
            if  (HASEXCEPTION())
            {
                goto ruleca_entryEx;
            }


            {

                                          ca_array[ca_array_size-1].admin_role_index = find_role_from_dict((char *)(id1->getText(id1))->chars);
                                          if(member_of(admin_role_array_index, admin_role_array_index_size, ca_array[ca_array_size-1].admin_role_index) == -1)
                                          {
                                            admin_role_array_index_size++;
                                            admin_role_array_index = (int *) realloc(admin_role_array_index, admin_role_array_index_size*sizeof(int));
                                            admin_role_array_index[admin_role_array_index_size-1] = ca_array[ca_array_size-1].admin_role_index;
                                          }
                                        
            }


             MATCHT(COMMA, &FOLLOW_COMMA_in_ca_entry359);
            if  (HASEXCEPTION())
            {
                goto ruleca_entryEx;
            }


            FOLLOWPUSH(FOLLOW_precondition_in_ca_entry361);
            precondition(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleca_entryEx;
            }


             MATCHT(COMMA, &FOLLOW_COMMA_in_ca_entry363);
            if  (HASEXCEPTION())
            {
                goto ruleca_entryEx;
            }


            id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_ca_entry367);
            if  (HASEXCEPTION())
            {
                goto ruleca_entryEx;
            }


            {

                                          ca_array[ca_array_size-1].target_role_index = find_role_from_dict((char *)(id2->getText(id2))->chars);
                                        
            }


             MATCHT(RANGLE, &FOLLOW_RANGLE_in_ca_entry370);
            if  (HASEXCEPTION())
            {
                goto ruleca_entryEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleca_entryEx; /* Prevent compiler warnings */
    ruleca_entryEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end ca_entry */

/**
 * $ANTLR start precondition
 * /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:177:1: precondition : ( atom ( CONJUNCTION atom )* | 'TRUE' | 'NEW' );
 */
static void
precondition(pARBACParser ctx)
{
    /* Initialize rule variables
     */


          ca_array[ca_array_size-1].positive_role_array_size = 0;
          ca_array[ca_array_size-1].positive_role_array = 0;
          ca_array[ca_array_size-1].negative_role_array_size = 0;
          ca_array[ca_array_size-1].negative_role_array = 0;

    {
        {
            //  /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:184:15: ( atom ( CONJUNCTION atom )* | 'TRUE' | 'NEW' )

            ANTLR3_UINT32 alt13;

            alt13=3;

            switch ( LA(1) )
            {
            case ID:
            case NOT:
            	{
            		alt13=1;
            	}
                break;
            case 23:
            	{
            		alt13=2;
            	}
                break;
            case 17:
            	{
            		alt13=3;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 13;
                EXCEPTION->state        = 0;


                goto rulepreconditionEx;

            }

            switch (alt13)
            {
        	case 1:
        	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:184:17: atom ( CONJUNCTION atom )*
        	    {
        	        FOLLOWPUSH(FOLLOW_atom_in_precondition397);
        	        atom(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepreconditionEx;
        	        }


        	        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:184:22: ( CONJUNCTION atom )*

        	        for (;;)
        	        {
        	            int alt12=2;
        	            switch ( LA(1) )
        	            {
        	            case CONJUNCTION:
        	            	{
        	            		alt12=1;
        	            	}
        	                break;

        	            }

        	            switch (alt12)
        	            {
        	        	case 1:
        	        	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:184:23: CONJUNCTION atom
        	        	    {
        	        	         MATCHT(CONJUNCTION, &FOLLOW_CONJUNCTION_in_precondition400);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepreconditionEx;
        	        	        }


        	        	        FOLLOWPUSH(FOLLOW_atom_in_precondition402);
        	        	        atom(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepreconditionEx;
        	        	        }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop12;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop12: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;
        	case 2:
        	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:185:17: 'TRUE'
        	    {
        	         MATCHT(23, &FOLLOW_23_in_precondition422);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepreconditionEx;
        	        }


        	        {

        	                            ca_array[ca_array_size-1].type = 1;
        	                          
        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:189:17: 'NEW'
        	    {
        	         MATCHT(17, &FOLLOW_17_in_precondition456);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepreconditionEx;
        	        }


        	        {

        	                            ca_array[ca_array_size-1].type = 2;
        	                            hasNewUserMode = 1;
        	                          
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulepreconditionEx; /* Prevent compiler warnings */
    rulepreconditionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end precondition */

/**
 * $ANTLR start atom
 * /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:196:1: atom : ( NOT )? id= ID ;
 */
static void
atom(pARBACParser ctx)
{
    pANTLR3_COMMON_TOKEN    id;

    /* Initialize rule variables
     */

    id       = NULL;

    {
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:196:6: ( ( NOT )? id= ID )
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:196:8: ( NOT )? id= ID
        {
            {
                iNeg = 0;
            }


            // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:196:20: ( NOT )?
            {
                int alt14=2;
                switch ( LA(1) )
                {
                    case NOT:
                    	{
                    		alt14=1;
                    	}
                        break;
                }

                switch (alt14)
                {
            	case 1:
            	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:196:21: NOT
            	    {
            	         MATCHT(NOT, &FOLLOW_NOT_in_atom498);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleatomEx;
            	        }


            	        {
            	            iNeg=1;
            	        }


            	    }
            	    break;

                }
            }

            id = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_atom505);
            if  (HASEXCEPTION())
            {
                goto ruleatomEx;
            }


            {

                          if(iNeg == 0){
                            ca_array[ca_array_size-1].positive_role_array_size++;
                            ca_array[ca_array_size-1].positive_role_array = (int *) realloc(ca_array[ca_array_size-1].positive_role_array, ca_array[ca_array_size-1].positive_role_array_size*sizeof(int));
                            ca_array[ca_array_size-1].positive_role_array[ca_array[ca_array_size-1].positive_role_array_size-1] = find_role_from_dict((char *)(id->getText(id))->chars);
                          }else{
                            ca_array[ca_array_size-1].negative_role_array_size++;
                            ca_array[ca_array_size-1].negative_role_array = (int *) realloc(ca_array[ca_array_size-1].negative_role_array, ca_array[ca_array_size-1].negative_role_array_size*sizeof(int));
                            ca_array[ca_array_size-1].negative_role_array[ca_array[ca_array_size-1].negative_role_array_size-1] = find_role_from_dict((char *)(id->getText(id))->chars);
                          }
                       
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleatomEx; /* Prevent compiler warnings */
    ruleatomEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end atom */

/**
 * $ANTLR start admin
 * /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:208:1: admin : 'ADMIN' (id= ID )* SEMI ;
 */
static void
admin(pARBACParser ctx)
{
    pANTLR3_COMMON_TOKEN    id;

    /* Initialize rule variables
     */

    id       = NULL;

    {
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:208:7: ( 'ADMIN' (id= ID )* SEMI )
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:208:9: 'ADMIN' (id= ID )* SEMI
        {
             MATCHT(12, &FOLLOW_12_in_admin515);
            if  (HASEXCEPTION())
            {
                goto ruleadminEx;
            }


            // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:208:17: (id= ID )*

            for (;;)
            {
                int alt15=2;
                switch ( LA(1) )
                {
                case ID:
                	{
                		alt15=1;
                	}
                    break;

                }

                switch (alt15)
                {
            	case 1:
            	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:208:18: id= ID
            	    {
            	        id = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_admin520);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleadminEx;
            	        }


            	        {

            	                                  admin_array_index_size++;
            	                                  admin_array_index = (int *) realloc(admin_array_index, admin_array_index_size*sizeof(int));
            	                                  admin_array_index[admin_array_index_size-1] = find_user_from_dict((char *)(id->getText(id))->chars);
            	                                  
            	        }


            	    }
            	    break;

            	default:
            	    goto loop15;	/* break out of the loop */
            	    break;
                }
            }
            loop15: ; /* Jump out to here if this rule does not match */


             MATCHT(SEMI, &FOLLOW_SEMI_in_admin525);
            if  (HASEXCEPTION())
            {
                goto ruleadminEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleadminEx; /* Prevent compiler warnings */
    ruleadminEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end admin */

/**
 * $ANTLR start spec
 * /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:214:1: spec : 'SPEC' id= ID spec_tail ;
 */
static void
spec(pARBACParser ctx)
{
    pANTLR3_COMMON_TOKEN    id;

    /* Initialize rule variables
     */

    id       = NULL;

    {
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:214:6: ( 'SPEC' id= ID spec_tail )
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:214:8: 'SPEC' id= ID spec_tail
        {
             MATCHT(22, &FOLLOW_22_in_spec533);
            if  (HASEXCEPTION())
            {
                goto rulespecEx;
            }


            id = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_spec537);
            if  (HASEXCEPTION())
            {
                goto rulespecEx;
            }


            {

                	goal_temp = (char *) malloc(strlen((char *)(id->getText(id))->chars)+1);
                	strcpy(goal_temp, (char *)(id->getText(id))->chars);

            }


            FOLLOWPUSH(FOLLOW_spec_tail_in_spec540);
            spec_tail(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulespecEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulespecEx; /* Prevent compiler warnings */
    rulespecEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end spec */

/**
 * $ANTLR start spec_tail
 * /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:219:1: spec_tail : (id= ID )? SEMI ;
 */
static void
spec_tail(pARBACParser ctx)
{
    pANTLR3_COMMON_TOKEN    id;

    /* Initialize rule variables
     */

    id       = NULL;

    {
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:220:2: ( (id= ID )? SEMI )
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:220:5: (id= ID )? SEMI
        {
            // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:220:5: (id= ID )?
            {
                int alt16=2;
                switch ( LA(1) )
                {
                    case ID:
                    	{
                    		alt16=1;
                    	}
                        break;
                }

                switch (alt16)
                {
            	case 1:
            	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal/src/ARBAC.g:220:6: id= ID
            	    {
            	        id = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_spec_tail553);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulespec_tailEx;
            	        }


            	        {

            	            			goal_user_index = find_user_from_dict(goal_temp);
            	                  if (goal_user_index == -1)
            	                  {
            	                    goal_user_index = find_newuser_from_dict(goal_temp);
            	                    if (goal_user_index == -1)
            	                    {
            	                      fprintf(stderr, "error: user %s in SPEC is not defined\n", goal_temp);
            	                      abort();
            	                    }
            	                    goalUserIsNew = 1;
            	                  }
            	            			goal_role_index = find_role_from_dict((char *)(id->getText(id))->chars);
            	            			free(goal_temp);
            	            			goal_temp = 0;
            	            			hasGoalUserMode = 1;
            	            		      
            	        }


            	    }
            	    break;

                }
            }

             MATCHT(SEMI, &FOLLOW_SEMI_in_spec_tail564);
            if  (HASEXCEPTION())
            {
                goto rulespec_tailEx;
            }


            {

                                    if(goal_temp != NULL)
                                    {
                                    	goal_role_index = find_role_from_dict(goal_temp);
                                    	free(goal_temp);
                                    }
                                   
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulespec_tailEx; /* Prevent compiler warnings */
    rulespec_tailEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end spec_tail */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */






/* End of code
 * =============================================================================
 */
