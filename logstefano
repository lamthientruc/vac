../regression/stefano/minified.arbac
===== ../regression/stefano/minified.arbac =====
=====> Simplification ARBAC policy =====>
=====> Translation ARBAC policy =====>
=====> Analysis of translated ARBAC policy =====>
The ARBAC policy may not be safe.
===> Under approximate analysis ===>
=====> Produce Counter Example ====>
Counter Example Trace:
Role to check REACHABILITY: RoleE

==> Step 1:
Target User: user0
CAN ASSIGN rule applied to user0: <RoleB,TRUE,RoleA>
Administrative user to invoke the rule: user0
Role configuration of user0 before applying rule: RoleB
Role configuration of user0 after applying rule: RoleB RoleA

==> Step 2:
Target User: user0
CAN ASSIGN rule applied to user0: <RoleB,RoleA,RoleD>
Administrative user to invoke the rule: user0
Role configuration of user0 before applying rule: RoleB RoleA
Role configuration of user0 after applying rule: RoleB RoleA RoleD

==> Step 3:
Target User: user0
CAN ASSIGN rule applied to user0: <RoleD,TRUE,RoleE>
Administrative user to invoke the rule: user0
Role configuration of user0 before applying rule: RoleB RoleA RoleD
Role configuration of user0 after applying rule: RoleB RoleA RoleD RoleE

user0 can REACH RoleE
RoleE is REACHABLE

Test with backend interproc  ==> UNSAFE  ==> UNSAFE OK
Test with backend moped  ==> UNSAFE  ==> UNSAFE OK
Test with backend z3  ==> UNSAFE  ==> UNSAFE OK
Test with backend cbmc  ==> UNSAFE  ==> UNSAFE OK
Test with backend hsf  ==> UNSAFE  ==> UNSAFE OK
Test with backend nusmv  ==> UNSAFE  ==> UNSAFE OK
Test with backend eldarica  ==> UNSAFE  ==> UNSAFE OK
*********CONSISTENT******************

../regression/stefano/prova.arbac
===== ../regression/stefano/prova.arbac =====
=====> Simplification ARBAC policy =====>
=====> Translation ARBAC policy =====>
=====> Analysis of translated ARBAC policy =====>
The ARBAC policy may not be safe.
===> Under approximate analysis ===>
=====> Produce Counter Example ====>
Counter Example Trace:
Role to check REACHABILITY: RoleB

==> Step 1:
Target User: user0
CAN ASSIGN rule applied to user0: <Super,TRUE,RoleC>
Administrative user to invoke the rule: user0
Role configuration of user0 before applying rule: Admin Super
Role configuration of user0 after applying rule: Admin Super RoleC

==> Step 2:
Target User: user0
CAN ASSIGN rule applied to user0: <RoleC,TRUE,RoleA>
Administrative user to invoke the rule: user0
Role configuration of user0 before applying rule: Admin Super RoleC
Role configuration of user0 after applying rule: Admin Super RoleC RoleA

==> Step 3:
Target User: user0
CAN ASSIGN rule applied to user0: <RoleA,TRUE,RoleB>
Administrative user to invoke the rule: user0
Role configuration of user0 before applying rule: Admin Super RoleC RoleA
Role configuration of user0 after applying rule: Admin Super RoleC RoleA RoleB

user0 can REACH RoleB
RoleB is REACHABLE

Test with backend interproc  ==> UNSAFE  ==> UNSAFE OK
Test with backend moped  ==> UNSAFE  ==> UNSAFE OK
Test with backend z3  ==> UNSAFE  ==> UNSAFE OK
Test with backend cbmc  ==> UNSAFE  ==> UNSAFE OK
Test with backend hsf  ==> UNSAFE  ==> UNSAFE OK
Test with backend nusmv  ==> UNSAFE  ==> UNSAFE OK
Test with backend eldarica  ==> UNSAFE  ==> UNSAFE OK
*********CONSISTENT******************

../regression/stefano/safe.arbac
===== ../regression/stefano/safe.arbac =====
=====> Simplification ARBAC policy =====>
=====> Translation ARBAC policy =====>
=====> Analysis of translated ARBAC policy =====>
The ARBAC policy is safe.

Test with backend interproc  ==> SAFE  ==> UNSAFE TROUBLE
Test with backend moped  ==> SAFE  ==> SAFE OK
Test with backend z3  ==> SAFE  ==> SAFE OK
Test with backend cbmc  ==> SAFE  ==> SAFE OK
Test with backend hsf  ==> SAFE  ==> SAFE OK
Test with backend nusmv  ==> SAFE  ==> SAFE OK
Test with backend eldarica  ==> SAFE  ==> SAFE OK
*********CONSISTENT******************

../regression/stefano/test.arbac
===== ../regression/stefano/test.arbac =====
=====> Simplification ARBAC policy =====>
=====> Translation ARBAC policy =====>
=====> Analysis of translated ARBAC policy =====>
The ARBAC policy may not be safe.
===> Under approximate analysis ===>
===> Complete Analysis ===>
There is no Counter Example.
The ARBAC policy is safe.

Test with backend interproc  ==> UNSAFE  ==> UNSAFE OK
Test with backend moped  ==> SAFE  ==> SAFE OK
Test with backend z3  ==> SAFE  ==> SAFE OK
Test with backend cbmc  ==> SAFE  ==> SAFE OK
Test with backend hsf  ==> SAFE  ==> SAFE OK
Test with backend nusmv  ==> SAFE  ==> SAFE OK
Test with backend eldarica  ==> SAFE  ==> SAFE OK
*********CONSISTENT******************

../regression/stefano/test_unsafe.arbac
===== ../regression/stefano/test_unsafe.arbac =====
=====> Simplification ARBAC policy =====>
=====> Translation ARBAC policy =====>
=====> Analysis of translated ARBAC policy =====>
The ARBAC policy may not be safe.
===> Under approximate analysis ===>
===> Complete Analysis ===>
=====> Produce Counter Example ====>
Counter Example Trace:
Role to check REACHABILITY: Done_TICK

==> Step 1:
Target User: user0
CAN ASSIGN rule applied to user0: <Super,TRUE,Allowed_a>
Administrative user to invoke the rule: user0
Role configuration of user0 before applying rule: Super
Role configuration of user0 after applying rule: Super Allowed_a

==> Step 2:
Target User: user0
CAN ASSIGN rule applied to user0: <Allowed_a,TRUE,Author_a>
Administrative user to invoke the rule: user0
Role configuration of user0 before applying rule: Super Allowed_a
Role configuration of user0 after applying rule: Super Allowed_a Author_a

==> Step 3:
Target User: user0
CAN ASSIGN rule applied to user0: <Author_a,TRUE,Done_a>
Administrative user to invoke the rule: user0
Role configuration of user0 before applying rule: Super Allowed_a Author_a
Role configuration of user0 after applying rule: Super Allowed_a Author_a Done_a

==> Step 4:
Target User: user1
CAN ASSIGN rule applied to user1: <Allowed_a,TRUE,Author_a>
Administrative user to invoke the rule: user0
Role configuration of user1 before applying rule: No role
Role configuration of user1 after applying rule: Author_a

==> Step 5:
Target User: user0
CAN ASSIGN rule applied to user0: <Super,Done_a,Allowed_b>
Administrative user to invoke the rule: user0
Role configuration of user0 before applying rule: Super Allowed_a Author_a Done_a
Role configuration of user0 after applying rule: Super Allowed_a Author_a Done_a Allowed_b

==> Step 6:
Target User: user0
CAN ASSIGN rule applied to user0: <Super,Done_a,Allowed_c>
Administrative user to invoke the rule: user0
Role configuration of user0 before applying rule: Super Allowed_a Author_a Done_a Allowed_b
Role configuration of user0 after applying rule: Super Allowed_a Author_a Done_a Allowed_b Allowed_c

==> Step 7:
Target User: user1
CAN ASSIGN rule applied to user1: <Author_a,TRUE,Done_a>
Administrative user to invoke the rule: user0
Role configuration of user1 before applying rule: Author_a
Role configuration of user1 after applying rule: Author_a Done_a

==> Step 8:
Target User: user1
CAN ASSIGN rule applied to user1: <Super,TRUE,Allowed_a>
Administrative user to invoke the rule: user0
Role configuration of user1 before applying rule: Author_a Done_a
Role configuration of user1 after applying rule: Author_a Done_a Allowed_a

==> Step 9:
Target User: user1
CAN ASSIGN rule applied to user1: <Super,Done_a,Allowed_b>
Administrative user to invoke the rule: user0
Role configuration of user1 before applying rule: Author_a Done_a Allowed_a
Role configuration of user1 after applying rule: Author_a Done_a Allowed_a Allowed_b

==> Step 10:
Target User: user1
CAN ASSIGN rule applied to user1: <Super,Done_a,Allowed_c>
Administrative user to invoke the rule: user0
Role configuration of user1 before applying rule: Author_a Done_a Allowed_a Allowed_b
Role configuration of user1 after applying rule: Author_a Done_a Allowed_a Allowed_b Allowed_c

==> Step 11:
Target User: user1
CAN ASSIGN rule applied to user1: <Allowed_c,-Author_b,Author_c>
Administrative user to invoke the rule: user1
Role configuration of user1 before applying rule: Author_a Done_a Allowed_a Allowed_b Allowed_c
Role configuration of user1 after applying rule: Author_a Done_a Allowed_a Allowed_b Allowed_c Author_c

==> Step 12:
Target User: user0
CAN ASSIGN rule applied to user0: <Allowed_b,-Author_c,Author_b>
Administrative user to invoke the rule: user1
Role configuration of user0 before applying rule: Super Allowed_a Author_a Done_a Allowed_b Allowed_c
Role configuration of user0 after applying rule: Super Allowed_a Author_a Done_a Allowed_b Allowed_c Author_b

==> Step 13:
Target User: user0
CAN ASSIGN rule applied to user0: <Author_b,TRUE,Done_b>
Administrative user to invoke the rule: user0
Role configuration of user0 before applying rule: Super Allowed_a Author_a Done_a Allowed_b Allowed_c Author_b
Role configuration of user0 after applying rule: Super Allowed_a Author_a Done_a Allowed_b Allowed_c Author_b Done_b

==> Step 14:
Target User: user1
CAN ASSIGN rule applied to user1: <Author_b,TRUE,Done_b>
Administrative user to invoke the rule: user0
Role configuration of user1 before applying rule: Author_a Done_a Allowed_a Allowed_b Allowed_c Author_c
Role configuration of user1 after applying rule: Author_a Done_a Allowed_a Allowed_b Allowed_c Author_c Done_b

==> Step 15:
Target User: user0
CAN ASSIGN rule applied to user0: <Author_c,TRUE,Done_c>
Administrative user to invoke the rule: user1
Role configuration of user0 before applying rule: Super Allowed_a Author_a Done_a Allowed_b Allowed_c Author_b Done_b
Role configuration of user0 after applying rule: Super Allowed_a Author_a Done_a Allowed_b Allowed_c Author_b Done_b Done_c

==> Step 16:
Target User: user1
CAN ASSIGN rule applied to user1: <Author_c,TRUE,Done_c>
Administrative user to invoke the rule: user1
Role configuration of user1 before applying rule: Author_a Done_a Allowed_a Allowed_b Allowed_c Author_c Done_b
Role configuration of user1 after applying rule: Author_a Done_a Allowed_a Allowed_b Allowed_c Author_c Done_b Done_c

==> Step 17:
Target User: user1
CAN ASSIGN rule applied to user1: <Super,Done_b&Done_c&Done_a,Allowed_TICK>
Administrative user to invoke the rule: user0
Role configuration of user1 before applying rule: Author_a Done_a Allowed_a Allowed_b Allowed_c Author_c Done_b Done_c
Role configuration of user1 after applying rule: Author_a Done_a Allowed_a Allowed_b Allowed_c Author_c Done_b Done_c Allowed_TICK

==> Step 18:
Target User: user0
CAN ASSIGN rule applied to user0: <Allowed_TICK,TRUE,Author_TICK>
Administrative user to invoke the rule: user1
Role configuration of user0 before applying rule: Super Allowed_a Author_a Done_a Allowed_b Allowed_c Author_b Done_b Done_c
Role configuration of user0 after applying rule: Super Allowed_a Author_a Done_a Allowed_b Allowed_c Author_b Done_b Done_c Author_TICK

==> Step 19:
Target User: user1
CAN ASSIGN rule applied to user1: <Allowed_TICK,TRUE,Author_TICK>
Administrative user to invoke the rule: user1
Role configuration of user1 before applying rule: Author_a Done_a Allowed_a Allowed_b Allowed_c Author_c Done_b Done_c Allowed_TICK
Role configuration of user1 after applying rule: Author_a Done_a Allowed_a Allowed_b Allowed_c Author_c Done_b Done_c Allowed_TICK Author_TICK

==> Step 20:
Target User: user0
CAN ASSIGN rule applied to user0: <Author_TICK,TRUE,Done_TICK>
Administrative user to invoke the rule: user1
Role configuration of user0 before applying rule: Super Allowed_a Author_a Done_a Allowed_b Allowed_c Author_b Done_b Done_c Author_TICK
Role configuration of user0 after applying rule: Super Allowed_a Author_a Done_a Allowed_b Allowed_c Author_b Done_b Done_c Author_TICK Done_TICK

user0 can REACH Done_TICK
Done_TICK is REACHABLE

Test with backend interproc  ==> UNSAFE  ==> UNSAFE OK
Test with backend moped  ==> UNSAFE  ==> UNSAFE OK
Test with backend z3  ==> UNSAFE  ==> UNSAFE OK
Test with backend cbmc  ==> SAFE  ==> SAFE OK
Test with backend hsf  ==> UNSAFE  ==> UNSAFE OK
Test with backend nusmv  ==> UNSAFE  ==> UNSAFE OK
Test with backend eldarica  ==> UNSAFE  ==> UNSAFE OK
*********CONSISTENT******************

../regression/stefano/troubles.arbac
===== ../regression/stefano/troubles.arbac =====
=====> Simplification ARBAC policy =====>
=====> Translation ARBAC policy =====>
=====> Analysis of translated ARBAC policy =====>
The ARBAC policy may not be safe.
===> Under approximate analysis ===>
=====> Produce Counter Example ====>
Counter Example Trace:
Role to check REACHABILITY: target

==> Step 1:
Target User: user1
CAN ASSIGN rule applied to user1: <Alice,TRUE,RoleA>
Administrative user to invoke the rule: user0
Role configuration of user1 before applying rule: No role
Role configuration of user1 after applying rule: RoleA

==> Step 2:
Target User: user1
CAN ASSIGN rule applied to user1: <RoleA,-Alice,target>
Administrative user to invoke the rule: user1
Role configuration of user1 before applying rule: RoleA
Role configuration of user1 after applying rule: RoleA target

user1 can REACH target
target is REACHABLE

Test with backend interproc  ==> UNSAFE  ==> UNSAFE OK
Test with backend moped  ==> UNSAFE  ==> UNSAFE OK
Test with backend z3  ==> UNSAFE  ==> UNSAFE OK
Test with backend cbmc  ==> UNSAFE  ==> UNSAFE OK
Test with backend hsf  ==> UNSAFE  ==> UNSAFE OK
Test with backend nusmv  ==> UNSAFE  ==> UNSAFE OK
Test with backend eldarica  ==> UNSAFE  ==> UNSAFE OK
*********CONSISTENT******************
