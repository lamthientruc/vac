/** \file
 *  This C source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g
 *     -                            On : 2014-01-14 15:03:14
 *     -                for the parser : ARBACParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "ARBACParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pARBACParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pARBACParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pARBACParser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pARBACParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */

#undef	    PARSER
#undef	    RECOGNIZER
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO
#undef		DBG

#define	    PARSER				ctx->pParser
#define	    RECOGNIZER				PARSER->rec
#define	    PSRSTATE				RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)			RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT				PARSER->tstream
#define	    STRSTREAM				INPUT
#define	    ISTREAM				INPUT->istream
#define	    INDEX()				ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()			(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				PSRSTATE->exception
#define	    MATCHT(t, fs)			RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()				RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK				PSRSTATE->following
#ifdef  SKIP_FOLLOW_SETS
#define	    FOLLOWPUSH(x)
#define	    FOLLOWPOP()
#else
#define	    FOLLOWPUSH(x)			FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()				FOLLOWSTACK->pop(FOLLOWSTACK)
#endif
#define	    PRECOVER()				RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()			RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)				INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)				INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()				ISTREAM->consume(ISTREAM)
#define	    MARK()				ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define	    SEEK(n)				ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY			PSRSTATE->errorRecovery
#define	    FAILEDFLAG				PSRSTATE->failed
#define	    HASFAILED()				(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING			PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   ARBACParserTokenNames[20+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>",
        (pANTLR3_UINT8) "<UP>",
        (pANTLR3_UINT8) "COMMA",
        (pANTLR3_UINT8) "CONJUNCTION",
        (pANTLR3_UINT8) "ID",
        (pANTLR3_UINT8) "LANGLE",
        (pANTLR3_UINT8) "NOT",
        (pANTLR3_UINT8) "RANGLE",
        (pANTLR3_UINT8) "SEMI",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "'ADMIN'",
        (pANTLR3_UINT8) "'CA'",
        (pANTLR3_UINT8) "'CR'",
        (pANTLR3_UINT8) "'FALSE'",
        (pANTLR3_UINT8) "'NEW'",
        (pANTLR3_UINT8) "'ROLES'",
        (pANTLR3_UINT8) "'Roles'",
        (pANTLR3_UINT8) "'SPEC'",
        (pANTLR3_UINT8) "'TRUE'",
        (pANTLR3_UINT8) "'UA'",
        (pANTLR3_UINT8) "'USERS'",
        (pANTLR3_UINT8) "'Users'"
       };



// Forward declare the locally static matching functions we have generated.
//
static 
 void
	parse    (pARBACParser ctx);
static 
 void
	node    (pARBACParser ctx);
static 
 void
	roles    (pARBACParser ctx);
static 
 void
	users    (pARBACParser ctx);
static 
 void
	ua    (pARBACParser ctx);
static 
 void
	cr    (pARBACParser ctx);
static 
 void
	ca    (pARBACParser ctx);
static 
 void
	ca_entry    (pARBACParser ctx);
static 
 void
	precondition    (pARBACParser ctx);
static 
 void
	atom    (pARBACParser ctx);
static 
 void
	admin    (pARBACParser ctx);
static 
 void
	spec    (pARBACParser ctx);
static 
 void
	spec_tail    (pARBACParser ctx);
static void	ARBACParserFree(pARBACParser ctx);
static void     ARBACParserReset (pARBACParser ctx);

/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed.
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "/home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new ARBACParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pARBACParser
ARBACParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return ARBACParserNewSSD(instream, NULL);
}

/** \brief Create a new ARBACParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pARBACParser
ARBACParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pARBACParser ctx;	    /* Context structure we will build and return   */

    ctx	= (pARBACParser) ANTLR3_CALLOC(1, sizeof(ARBACParser));

    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in ARBACParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our ARBACParser interface
     */
    ctx->parse	= parse;
    ctx->node	= node;
    ctx->roles	= roles;
    ctx->users	= users;
    ctx->ua	= ua;
    ctx->cr	= cr;
    ctx->ca	= ca;
    ctx->ca_entry	= ca_entry;
    ctx->precondition	= precondition;
    ctx->atom	= atom;
    ctx->admin	= admin;
    ctx->spec	= spec;
    ctx->spec_tail	= spec_tail;
    ctx->free			= ARBACParserFree;
    ctx->reset			= ARBACParserReset;
    ctx->getGrammarFileName	= getGrammarFileName;

    /* Install the scope pushing methods.
     */

    /* Install the token table
     */
    PSRSTATE->tokenNames   = ARBACParserTokenNames;


    /* Return the newly built parser to the caller
     */
    return  ctx;
}

static void
ARBACParserReset (pARBACParser ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** Free the parser resources
 */
 static void
 ARBACParserFree(pARBACParser ctx)
 {
    /* Free any scope memory
     */

	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);


    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames()
{
        return ARBACParserTokenNames;
}


      static int
      member_of(int * array, int array_size, int ele)
      {
        int i;
        if(array_size == 0)
        {
          return -1;
        }
        for(i = array_size-1; i >=0; i--)
        {
          if(array[i] == ele)
          {
            return i;
          }
        }
        return -1;
      }


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: FOLLOW_node_in_parse55  */
static	ANTLR3_BITWORD FOLLOW_node_in_parse55_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000EE7002) };
static  ANTLR3_BITSET_LIST FOLLOW_node_in_parse55	= { FOLLOW_node_in_parse55_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_roles_in_node64  */
static	ANTLR3_BITWORD FOLLOW_roles_in_node64_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_roles_in_node64	= { FOLLOW_roles_in_node64_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_users_in_node68  */
static	ANTLR3_BITWORD FOLLOW_users_in_node68_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_users_in_node68	= { FOLLOW_users_in_node68_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ua_in_node72  */
static	ANTLR3_BITWORD FOLLOW_ua_in_node72_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ua_in_node72	= { FOLLOW_ua_in_node72_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cr_in_node76  */
static	ANTLR3_BITWORD FOLLOW_cr_in_node76_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_cr_in_node76	= { FOLLOW_cr_in_node76_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ca_in_node80  */
static	ANTLR3_BITWORD FOLLOW_ca_in_node80_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ca_in_node80	= { FOLLOW_ca_in_node80_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_admin_in_node84  */
static	ANTLR3_BITWORD FOLLOW_admin_in_node84_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_admin_in_node84	= { FOLLOW_admin_in_node84_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_spec_in_node88  */
static	ANTLR3_BITWORD FOLLOW_spec_in_node88_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_spec_in_node88	= { FOLLOW_spec_in_node88_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_roles96  */
static	ANTLR3_BITWORD FOLLOW_set_in_roles96_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000440) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_roles96	= { FOLLOW_set_in_roles96_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_roles105  */
static	ANTLR3_BITWORD FOLLOW_ID_in_roles105_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000440) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_roles105	= { FOLLOW_ID_in_roles105_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMI_in_roles110  */
static	ANTLR3_BITWORD FOLLOW_SEMI_in_roles110_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMI_in_roles110	= { FOLLOW_SEMI_in_roles110_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_users120  */
static	ANTLR3_BITWORD FOLLOW_set_in_users120_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000440) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_users120	= { FOLLOW_set_in_users120_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_users129  */
static	ANTLR3_BITWORD FOLLOW_ID_in_users129_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000440) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_users129	= { FOLLOW_ID_in_users129_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMI_in_users134  */
static	ANTLR3_BITWORD FOLLOW_SEMI_in_users134_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMI_in_users134	= { FOLLOW_SEMI_in_users134_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_21_in_ua144  */
static	ANTLR3_BITWORD FOLLOW_21_in_ua144_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000480) };
static  ANTLR3_BITSET_LIST FOLLOW_21_in_ua144	= { FOLLOW_21_in_ua144_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LANGLE_in_ua147  */
static	ANTLR3_BITWORD FOLLOW_LANGLE_in_ua147_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_LANGLE_in_ua147	= { FOLLOW_LANGLE_in_ua147_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_ua153  */
static	ANTLR3_BITWORD FOLLOW_ID_in_ua153_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_ua153	= { FOLLOW_ID_in_ua153_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_ua156  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_ua156_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_ua156	= { FOLLOW_COMMA_in_ua156_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_ua160  */
static	ANTLR3_BITWORD FOLLOW_ID_in_ua160_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_ua160	= { FOLLOW_ID_in_ua160_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RANGLE_in_ua163  */
static	ANTLR3_BITWORD FOLLOW_RANGLE_in_ua163_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000480) };
static  ANTLR3_BITSET_LIST FOLLOW_RANGLE_in_ua163	= { FOLLOW_RANGLE_in_ua163_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMI_in_ua167  */
static	ANTLR3_BITWORD FOLLOW_SEMI_in_ua167_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMI_in_ua167	= { FOLLOW_SEMI_in_ua167_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_14_in_cr176  */
static	ANTLR3_BITWORD FOLLOW_14_in_cr176_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000480) };
static  ANTLR3_BITSET_LIST FOLLOW_14_in_cr176	= { FOLLOW_14_in_cr176_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LANGLE_in_cr179  */
static	ANTLR3_BITWORD FOLLOW_LANGLE_in_cr179_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000008040) };
static  ANTLR3_BITSET_LIST FOLLOW_LANGLE_in_cr179	= { FOLLOW_LANGLE_in_cr179_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_cr205  */
static	ANTLR3_BITWORD FOLLOW_ID_in_cr205_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_cr205	= { FOLLOW_ID_in_cr205_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_15_in_cr226  */
static	ANTLR3_BITWORD FOLLOW_15_in_cr226_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_15_in_cr226	= { FOLLOW_15_in_cr226_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_cr230  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_cr230_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_cr230	= { FOLLOW_COMMA_in_cr230_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_cr234  */
static	ANTLR3_BITWORD FOLLOW_ID_in_cr234_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_cr234	= { FOLLOW_ID_in_cr234_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RANGLE_in_cr271  */
static	ANTLR3_BITWORD FOLLOW_RANGLE_in_cr271_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000480) };
static  ANTLR3_BITSET_LIST FOLLOW_RANGLE_in_cr271	= { FOLLOW_RANGLE_in_cr271_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMI_in_cr295  */
static	ANTLR3_BITWORD FOLLOW_SEMI_in_cr295_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMI_in_cr295	= { FOLLOW_SEMI_in_cr295_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_13_in_ca304  */
static	ANTLR3_BITWORD FOLLOW_13_in_ca304_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000480) };
static  ANTLR3_BITSET_LIST FOLLOW_13_in_ca304	= { FOLLOW_13_in_ca304_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ca_entry_in_ca309  */
static	ANTLR3_BITWORD FOLLOW_ca_entry_in_ca309_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000480) };
static  ANTLR3_BITSET_LIST FOLLOW_ca_entry_in_ca309	= { FOLLOW_ca_entry_in_ca309_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMI_in_ca313  */
static	ANTLR3_BITWORD FOLLOW_SEMI_in_ca313_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMI_in_ca313	= { FOLLOW_SEMI_in_ca313_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LANGLE_in_ca_entry322  */
static	ANTLR3_BITWORD FOLLOW_LANGLE_in_ca_entry322_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_LANGLE_in_ca_entry322	= { FOLLOW_LANGLE_in_ca_entry322_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_ca_entry326  */
static	ANTLR3_BITWORD FOLLOW_ID_in_ca_entry326_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_ca_entry326	= { FOLLOW_ID_in_ca_entry326_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_ca_entry354  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_ca_entry354_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000110140) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_ca_entry354	= { FOLLOW_COMMA_in_ca_entry354_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_precondition_in_ca_entry356  */
static	ANTLR3_BITWORD FOLLOW_precondition_in_ca_entry356_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_precondition_in_ca_entry356	= { FOLLOW_precondition_in_ca_entry356_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_ca_entry358  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_ca_entry358_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_ca_entry358	= { FOLLOW_COMMA_in_ca_entry358_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_ca_entry362  */
static	ANTLR3_BITWORD FOLLOW_ID_in_ca_entry362_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_ca_entry362	= { FOLLOW_ID_in_ca_entry362_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RANGLE_in_ca_entry365  */
static	ANTLR3_BITWORD FOLLOW_RANGLE_in_ca_entry365_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RANGLE_in_ca_entry365	= { FOLLOW_RANGLE_in_ca_entry365_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_atom_in_precondition393  */
static	ANTLR3_BITWORD FOLLOW_atom_in_precondition393_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000022) };
static  ANTLR3_BITSET_LIST FOLLOW_atom_in_precondition393	= { FOLLOW_atom_in_precondition393_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONJUNCTION_in_precondition396  */
static	ANTLR3_BITWORD FOLLOW_CONJUNCTION_in_precondition396_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000140) };
static  ANTLR3_BITSET_LIST FOLLOW_CONJUNCTION_in_precondition396	= { FOLLOW_CONJUNCTION_in_precondition396_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_atom_in_precondition398  */
static	ANTLR3_BITWORD FOLLOW_atom_in_precondition398_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000022) };
static  ANTLR3_BITSET_LIST FOLLOW_atom_in_precondition398	= { FOLLOW_atom_in_precondition398_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_20_in_precondition418  */
static	ANTLR3_BITWORD FOLLOW_20_in_precondition418_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_20_in_precondition418	= { FOLLOW_20_in_precondition418_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_16_in_precondition452  */
static	ANTLR3_BITWORD FOLLOW_16_in_precondition452_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_16_in_precondition452	= { FOLLOW_16_in_precondition452_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_in_atom494  */
static	ANTLR3_BITWORD FOLLOW_NOT_in_atom494_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_in_atom494	= { FOLLOW_NOT_in_atom494_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_atom501  */
static	ANTLR3_BITWORD FOLLOW_ID_in_atom501_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_atom501	= { FOLLOW_ID_in_atom501_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_12_in_admin511  */
static	ANTLR3_BITWORD FOLLOW_12_in_admin511_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000440) };
static  ANTLR3_BITSET_LIST FOLLOW_12_in_admin511	= { FOLLOW_12_in_admin511_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_admin516  */
static	ANTLR3_BITWORD FOLLOW_ID_in_admin516_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000440) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_admin516	= { FOLLOW_ID_in_admin516_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMI_in_admin521  */
static	ANTLR3_BITWORD FOLLOW_SEMI_in_admin521_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMI_in_admin521	= { FOLLOW_SEMI_in_admin521_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_19_in_spec551  */
static	ANTLR3_BITWORD FOLLOW_19_in_spec551_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_19_in_spec551	= { FOLLOW_19_in_spec551_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_spec555  */
static	ANTLR3_BITWORD FOLLOW_ID_in_spec555_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000440) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_spec555	= { FOLLOW_ID_in_spec555_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_spec_tail_in_spec558  */
static	ANTLR3_BITWORD FOLLOW_spec_tail_in_spec558_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_spec_tail_in_spec558	= { FOLLOW_spec_tail_in_spec558_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_spec_tail571  */
static	ANTLR3_BITWORD FOLLOW_ID_in_spec_tail571_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_spec_tail571	= { FOLLOW_ID_in_spec_tail571_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMI_in_spec_tail583  */
static	ANTLR3_BITWORD FOLLOW_SEMI_in_spec_tail583_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMI_in_spec_tail583	= { FOLLOW_SEMI_in_spec_tail583_bits, 1	};


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start parse
 * /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:38:1: parse : ( node )+ ;
 */
static void
parse(pARBACParser ctx)
{
    /* Initialize rule variables
     */


              /* Initialize all variables of RBAC system */
              role_array = 0;
              user_array = 0;
              role_array_size = 0;
              user_array_size = 0;
              ua_array = 0;
              ua_array_size = 0;
              cr_array = 0;
              cr_array_size = 0;
              ca_array = 0;
              ca_array_size = 0;
              admin_array_index = 0;
              admin_array_index_size = 0;
              admin_role_array_index = 0;
              admin_role_array_index_size = 0;
              goal_user_index = -1;
              goal_role_index = -1;
              goal_temp = 0;
              iNeg = 0;   
              //super_exist = 0; // For Simplify
              hasNewUserMode = 0; // For Translate
              initialize_role_array = 0;
              initialize_role_array_size = 0;
              hasGoalUserMode = 0; // For Translate
              
    {
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:64:8: ( ( node )+ )
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:64:10: ( node )+
        {
            // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:64:10: ( node )+
            {
                int cnt1=0;

                for (;;)
                {
                    int alt1=2;
            	switch ( LA(1) )
            	{
            	case 12:
            	case 13:
            	case 14:
            	case 17:
            	case 18:
            	case 19:
            	case 21:
            	case 22:
            	case 23:
            		{
            			alt1=1;
            		}
            	    break;

            	}

            	switch (alt1)
            	{
            	    case 1:
            	        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:64:10: node
            	        {
            	            FOLLOWPUSH(FOLLOW_node_in_parse55);
            	            node(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleparseEx;
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt1 >= 1 )
            		{
            		    goto loop1;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto ruleparseEx;
            	}
            	cnt1++;
                }
                loop1: ;	/* Jump to here if this rule does not match */
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruleparseEx; /* Prevent compiler warnings */
    ruleparseEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end parse */

/**
 * $ANTLR start node
 * /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:66:1: node : ( roles | users | ua | cr | ca | admin | spec );
 */
static void
node(pARBACParser ctx)
{
    /* Initialize rule variables
     */

    {
        {
            //  /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:66:6: ( roles | users | ua | cr | ca | admin | spec )

            ANTLR3_UINT32 alt2;

            alt2=7;

            switch ( LA(1) )
            {
            case 17:
            case 18:
            	{
            		alt2=1;
            	}
                break;
            case 22:
            case 23:
            	{
            		alt2=2;
            	}
                break;
            case 21:
            	{
            		alt2=3;
            	}
                break;
            case 14:
            	{
            		alt2=4;
            	}
                break;
            case 13:
            	{
            		alt2=5;
            	}
                break;
            case 12:
            	{
            		alt2=6;
            	}
                break;
            case 19:
            	{
            		alt2=7;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 2;
                EXCEPTION->state        = 0;


                goto rulenodeEx;

            }

            switch (alt2)
            {
        	case 1:
        	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:66:8: roles
        	    {
        	        FOLLOWPUSH(FOLLOW_roles_in_node64);
        	        roles(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenodeEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:66:16: users
        	    {
        	        FOLLOWPUSH(FOLLOW_users_in_node68);
        	        users(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenodeEx;
        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:66:24: ua
        	    {
        	        FOLLOWPUSH(FOLLOW_ua_in_node72);
        	        ua(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenodeEx;
        	        }


        	    }
        	    break;
        	case 4:
        	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:66:29: cr
        	    {
        	        FOLLOWPUSH(FOLLOW_cr_in_node76);
        	        cr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenodeEx;
        	        }


        	    }
        	    break;
        	case 5:
        	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:66:34: ca
        	    {
        	        FOLLOWPUSH(FOLLOW_ca_in_node80);
        	        ca(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenodeEx;
        	        }


        	    }
        	    break;
        	case 6:
        	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:66:39: admin
        	    {
        	        FOLLOWPUSH(FOLLOW_admin_in_node84);
        	        admin(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenodeEx;
        	        }


        	    }
        	    break;
        	case 7:
        	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:66:47: spec
        	    {
        	        FOLLOWPUSH(FOLLOW_spec_in_node88);
        	        spec(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenodeEx;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulenodeEx; /* Prevent compiler warnings */
    rulenodeEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end node */

/**
 * $ANTLR start roles
 * /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:68:1: roles : ( 'Roles' | 'ROLES' ) (id= ID )* SEMI ;
 */
static void
roles(pARBACParser ctx)
{
    pANTLR3_COMMON_TOKEN    id;

    /* Initialize rule variables
     */

    id       = NULL;

    {
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:68:7: ( ( 'Roles' | 'ROLES' ) (id= ID )* SEMI )
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:68:9: ( 'Roles' | 'ROLES' ) (id= ID )* SEMI
        {
            if ( ((LA(1) >= 17) && (LA(1) <= 18)) )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto rulerolesEx;
            }


            // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:68:27: (id= ID )*

            for (;;)
            {
                int alt3=2;
                switch ( LA(1) )
                {
                case ID:
                	{
                		alt3=1;
                	}
                    break;

                }

                switch (alt3)
                {
            	case 1:
            	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:68:28: id= ID
            	    {
            	        id = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_roles105);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerolesEx;
            	        }


            	        {

            	                                    role_array_size++;
            	                                    role_array = realloc(role_array, role_array_size*sizeof(char*));
            	                                    role_array[role_array_size-1] = malloc(strlen((id->getText(id))->chars)+1);
            	                                    strcpy(role_array[role_array_size-1], (id->getText(id))->chars);
            	                                  
            	        }


            	    }
            	    break;

            	default:
            	    goto loop3;	/* break out of the loop */
            	    break;
                }
            }
            loop3: ; /* Jump out to here if this rule does not match */


             MATCHT(SEMI, &FOLLOW_SEMI_in_roles110);
            if  (HASEXCEPTION())
            {
                goto rulerolesEx;
            }


            {

                                      	create_role_dict();
                                      
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulerolesEx; /* Prevent compiler warnings */
    rulerolesEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end roles */

/**
 * $ANTLR start users
 * /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:77:1: users : ( 'Users' | 'USERS' ) (id= ID )* SEMI ;
 */
static void
users(pARBACParser ctx)
{
    pANTLR3_COMMON_TOKEN    id;

    /* Initialize rule variables
     */

    id       = NULL;

    {
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:77:7: ( ( 'Users' | 'USERS' ) (id= ID )* SEMI )
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:77:9: ( 'Users' | 'USERS' ) (id= ID )* SEMI
        {
            if ( ((LA(1) >= 22) && (LA(1) <= 23)) )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto ruleusersEx;
            }


            // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:77:27: (id= ID )*

            for (;;)
            {
                int alt4=2;
                switch ( LA(1) )
                {
                case ID:
                	{
                		alt4=1;
                	}
                    break;

                }

                switch (alt4)
                {
            	case 1:
            	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:77:28: id= ID
            	    {
            	        id = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_users129);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleusersEx;
            	        }


            	        {

            	                                      user_array_size++;
            	                                      user_array = realloc(user_array, user_array_size*sizeof(char*));
            	                                      user_array[user_array_size-1] = malloc(strlen((id->getText(id))->chars)+1);
            	                                      strcpy(user_array[user_array_size-1], (id->getText(id))->chars);
            	                                  
            	        }


            	    }
            	    break;

            	default:
            	    goto loop4;	/* break out of the loop */
            	    break;
                }
            }
            loop4: ; /* Jump out to here if this rule does not match */


             MATCHT(SEMI, &FOLLOW_SEMI_in_users134);
            if  (HASEXCEPTION())
            {
                goto ruleusersEx;
            }


            {

                                        create_user_dict();
                                      
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleusersEx; /* Prevent compiler warnings */
    ruleusersEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end users */

/**
 * $ANTLR start ua
 * /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:86:1: ua : 'UA' ( LANGLE id1= ID COMMA id2= ID RANGLE )* SEMI ;
 */
static void
ua(pARBACParser ctx)
{
    pANTLR3_COMMON_TOKEN    id1;
    pANTLR3_COMMON_TOKEN    id2;

    /* Initialize rule variables
     */

    id1       = NULL;
    id2       = NULL;

    {
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:86:4: ( 'UA' ( LANGLE id1= ID COMMA id2= ID RANGLE )* SEMI )
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:86:6: 'UA' ( LANGLE id1= ID COMMA id2= ID RANGLE )* SEMI
        {
             MATCHT(21, &FOLLOW_21_in_ua144);
            if  (HASEXCEPTION())
            {
                goto ruleuaEx;
            }


            // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:86:11: ( LANGLE id1= ID COMMA id2= ID RANGLE )*

            for (;;)
            {
                int alt5=2;
                switch ( LA(1) )
                {
                case LANGLE:
                	{
                		alt5=1;
                	}
                    break;

                }

                switch (alt5)
                {
            	case 1:
            	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:86:12: LANGLE id1= ID COMMA id2= ID RANGLE
            	    {
            	         MATCHT(LANGLE, &FOLLOW_LANGLE_in_ua147);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleuaEx;
            	        }


            	        {

            	                                ua_array_size++;
            	                                ua_array = realloc(ua_array, ua_array_size*sizeof(_UA));
            	                              
            	        }


            	        id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_ua153);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleuaEx;
            	        }


            	        {

            	                                ua_array[ua_array_size-1].user_index = find_user_from_dict((id1->getText(id1))->chars);
            	                              
            	        }


            	         MATCHT(COMMA, &FOLLOW_COMMA_in_ua156);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleuaEx;
            	        }


            	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_ua160);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleuaEx;
            	        }


            	        {
            	                                            
            	                                ua_array[ua_array_size-1].role_index = find_role_from_dict((id2->getText(id2))->chars);
            	                              
            	        }


            	         MATCHT(RANGLE, &FOLLOW_RANGLE_in_ua163);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleuaEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop5;	/* break out of the loop */
            	    break;
                }
            }
            loop5: ; /* Jump out to here if this rule does not match */


             MATCHT(SEMI, &FOLLOW_SEMI_in_ua167);
            if  (HASEXCEPTION())
            {
                goto ruleuaEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleuaEx; /* Prevent compiler warnings */
    ruleuaEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end ua */

/**
 * $ANTLR start cr
 * /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:95:1: cr : 'CR' ( LANGLE (id1= ID | 'FALSE' ) COMMA id2= ID RANGLE )* SEMI ;
 */
static void
cr(pARBACParser ctx)
{
    pANTLR3_COMMON_TOKEN    id1;
    pANTLR3_COMMON_TOKEN    id2;

    /* Initialize rule variables
     */

    id1       = NULL;
    id2       = NULL;

    {
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:95:4: ( 'CR' ( LANGLE (id1= ID | 'FALSE' ) COMMA id2= ID RANGLE )* SEMI )
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:95:6: 'CR' ( LANGLE (id1= ID | 'FALSE' ) COMMA id2= ID RANGLE )* SEMI
        {
             MATCHT(14, &FOLLOW_14_in_cr176);
            if  (HASEXCEPTION())
            {
                goto rulecrEx;
            }


            // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:95:11: ( LANGLE (id1= ID | 'FALSE' ) COMMA id2= ID RANGLE )*

            for (;;)
            {
                int alt7=2;
                switch ( LA(1) )
                {
                case LANGLE:
                	{
                		alt7=1;
                	}
                    break;

                }

                switch (alt7)
                {
            	case 1:
            	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:95:12: LANGLE (id1= ID | 'FALSE' ) COMMA id2= ID RANGLE
            	    {
            	         MATCHT(LANGLE, &FOLLOW_LANGLE_in_cr179);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecrEx;
            	        }


            	        {

            	            			iNeg = 0;
            	                              
            	        }


            	        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:98:19: (id1= ID | 'FALSE' )
            	        {
            	            int alt6=2;
            	            switch ( LA(1) )
            	            {
            	            case ID:
            	            	{
            	            		alt6=1;
            	            	}
            	                break;
            	            case 15:
            	            	{
            	            		alt6=2;
            	            	}
            	                break;

            	            default:
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 6;
            	                EXCEPTION->state        = 0;


            	                goto rulecrEx;

            	            }

            	            switch (alt6)
            	            {
            	        	case 1:
            	        	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:98:20: id1= ID
            	        	    {
            	        	        id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_cr205);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecrEx;
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:99:20: 'FALSE'
            	        	    {
            	        	         MATCHT(15, &FOLLOW_15_in_cr226);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecrEx;
            	        	        }


            	        	        {

            	        	                                iNeg = 1;
            	        	                              
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	         MATCHT(COMMA, &FOLLOW_COMMA_in_cr230);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecrEx;
            	        }


            	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_cr234);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecrEx;
            	        }


            	         MATCHT(RANGLE, &FOLLOW_RANGLE_in_cr271);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecrEx;
            	        }


            	        {

            	                              if(!iNeg)
            	                              {
            	                                cr_array_size++;
            	                                cr_array = realloc(cr_array, cr_array_size*sizeof(_CR));
            	                                cr_array[cr_array_size-1].admin_role_index = find_role_from_dict((id1->getText(id1))->chars);
            	                                if(member_of(admin_role_array_index, admin_role_array_index_size, cr_array[cr_array_size-1].admin_role_index) == -1)
            	                                {
            	                                  admin_role_array_index_size++;
            	                                  admin_role_array_index = realloc(admin_role_array_index, admin_role_array_index_size*sizeof(int));
            	                                  admin_role_array_index[admin_role_array_index_size-1] = cr_array[cr_array_size-1].admin_role_index;
            	                                }
            	                                cr_array[cr_array_size-1].target_role_index = find_role_from_dict((id2->getText(id2))->chars);
            	                              }
            	                              
            	        }


            	    }
            	    break;

            	default:
            	    goto loop7;	/* break out of the loop */
            	    break;
                }
            }
            loop7: ; /* Jump out to here if this rule does not match */


             MATCHT(SEMI, &FOLLOW_SEMI_in_cr295);
            if  (HASEXCEPTION())
            {
                goto rulecrEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulecrEx; /* Prevent compiler warnings */
    rulecrEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end cr */

/**
 * $ANTLR start ca
 * /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:119:1: ca : 'CA' ( ca_entry )* SEMI ;
 */
static void
ca(pARBACParser ctx)
{
    /* Initialize rule variables
     */

    {
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:119:4: ( 'CA' ( ca_entry )* SEMI )
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:119:6: 'CA' ( ca_entry )* SEMI
        {
             MATCHT(13, &FOLLOW_13_in_ca304);
            if  (HASEXCEPTION())
            {
                goto rulecaEx;
            }


            // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:119:11: ( ca_entry )*

            for (;;)
            {
                int alt8=2;
                switch ( LA(1) )
                {
                case LANGLE:
                	{
                		alt8=1;
                	}
                    break;

                }

                switch (alt8)
                {
            	case 1:
            	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:119:12: ca_entry
            	    {
            	        {

            	                          ca_array_size++;
            	                          ca_array = realloc(ca_array, ca_array_size*sizeof(_CA));
            	                          ca_array[ca_array_size-1].type = 0;              
            	                       
            	        }


            	        FOLLOWPUSH(FOLLOW_ca_entry_in_ca309);
            	        ca_entry(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop8;	/* break out of the loop */
            	    break;
                }
            }
            loop8: ; /* Jump out to here if this rule does not match */


             MATCHT(SEMI, &FOLLOW_SEMI_in_ca313);
            if  (HASEXCEPTION())
            {
                goto rulecaEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulecaEx; /* Prevent compiler warnings */
    rulecaEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end ca */

/**
 * $ANTLR start ca_entry
 * /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:125:1: ca_entry : LANGLE id1= ID COMMA precondition COMMA id2= ID RANGLE ;
 */
static void
ca_entry(pARBACParser ctx)
{
    pANTLR3_COMMON_TOKEN    id1;
    pANTLR3_COMMON_TOKEN    id2;

    /* Initialize rule variables
     */

    id1       = NULL;
    id2       = NULL;

    {
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:125:10: ( LANGLE id1= ID COMMA precondition COMMA id2= ID RANGLE )
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:125:12: LANGLE id1= ID COMMA precondition COMMA id2= ID RANGLE
        {
             MATCHT(LANGLE, &FOLLOW_LANGLE_in_ca_entry322);
            if  (HASEXCEPTION())
            {
                goto ruleca_entryEx;
            }


            id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_ca_entry326);
            if  (HASEXCEPTION())
            {
                goto ruleca_entryEx;
            }


            {

                                          ca_array[ca_array_size-1].admin_role_index = find_role_from_dict((id1->getText(id1))->chars);
                                          if(member_of(admin_role_array_index, admin_role_array_index_size, ca_array[ca_array_size-1].admin_role_index) == -1)
                                          {
                                            admin_role_array_index_size++;
                                            admin_role_array_index = realloc(admin_role_array_index, admin_role_array_index_size*sizeof(int));
                                            admin_role_array_index[admin_role_array_index_size-1] = ca_array[ca_array_size-1].admin_role_index;
                                          }
                                        
            }


             MATCHT(COMMA, &FOLLOW_COMMA_in_ca_entry354);
            if  (HASEXCEPTION())
            {
                goto ruleca_entryEx;
            }


            FOLLOWPUSH(FOLLOW_precondition_in_ca_entry356);
            precondition(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleca_entryEx;
            }


             MATCHT(COMMA, &FOLLOW_COMMA_in_ca_entry358);
            if  (HASEXCEPTION())
            {
                goto ruleca_entryEx;
            }


            id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_ca_entry362);
            if  (HASEXCEPTION())
            {
                goto ruleca_entryEx;
            }


            {

                                          ca_array[ca_array_size-1].target_role_index = find_role_from_dict((id2->getText(id2))->chars);
                                          // For translation only
                                          if(ca_array[ca_array_size-1].type == 2)
                                          {
                                          	initialize_role_array_size++;
                                          	initialize_role_array = realloc(initialize_role_array, initialize_role_array_size*sizeof(int));
                                          	initialize_role_array[initialize_role_array_size-1] = ca_array[ca_array_size-1].target_role_index;	
                                          }
                                        
            }


             MATCHT(RANGLE, &FOLLOW_RANGLE_in_ca_entry365);
            if  (HASEXCEPTION())
            {
                goto ruleca_entryEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleca_entryEx; /* Prevent compiler warnings */
    ruleca_entryEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end ca_entry */

/**
 * $ANTLR start precondition
 * /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:145:1: precondition : ( atom ( CONJUNCTION atom )* | 'TRUE' | 'NEW' );
 */
static void
precondition(pARBACParser ctx)
{
    /* Initialize rule variables
     */


          ca_array[ca_array_size-1].positive_role_array_size = 0;
          ca_array[ca_array_size-1].positive_role_array = 0;
          ca_array[ca_array_size-1].negative_role_array_size = 0;
          ca_array[ca_array_size-1].negative_role_array = 0;

    {
        {
            //  /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:152:15: ( atom ( CONJUNCTION atom )* | 'TRUE' | 'NEW' )

            ANTLR3_UINT32 alt10;

            alt10=3;

            switch ( LA(1) )
            {
            case ID:
            case NOT:
            	{
            		alt10=1;
            	}
                break;
            case 20:
            	{
            		alt10=2;
            	}
                break;
            case 16:
            	{
            		alt10=3;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 10;
                EXCEPTION->state        = 0;


                goto rulepreconditionEx;

            }

            switch (alt10)
            {
        	case 1:
        	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:152:17: atom ( CONJUNCTION atom )*
        	    {
        	        FOLLOWPUSH(FOLLOW_atom_in_precondition393);
        	        atom(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepreconditionEx;
        	        }


        	        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:152:22: ( CONJUNCTION atom )*

        	        for (;;)
        	        {
        	            int alt9=2;
        	            switch ( LA(1) )
        	            {
        	            case CONJUNCTION:
        	            	{
        	            		alt9=1;
        	            	}
        	                break;

        	            }

        	            switch (alt9)
        	            {
        	        	case 1:
        	        	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:152:23: CONJUNCTION atom
        	        	    {
        	        	         MATCHT(CONJUNCTION, &FOLLOW_CONJUNCTION_in_precondition396);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepreconditionEx;
        	        	        }


        	        	        FOLLOWPUSH(FOLLOW_atom_in_precondition398);
        	        	        atom(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepreconditionEx;
        	        	        }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop9;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop9: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;
        	case 2:
        	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:153:17: 'TRUE'
        	    {
        	         MATCHT(20, &FOLLOW_20_in_precondition418);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepreconditionEx;
        	        }


        	        {

        	                            ca_array[ca_array_size-1].type = 1;
        	                          
        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:157:17: 'NEW'
        	    {
        	         MATCHT(16, &FOLLOW_16_in_precondition452);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepreconditionEx;
        	        }


        	        {

        	                            ca_array[ca_array_size-1].type = 2;
        	                            hasNewUserMode = 1; // For translate
        	                          
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulepreconditionEx; /* Prevent compiler warnings */
    rulepreconditionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end precondition */

/**
 * $ANTLR start atom
 * /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:164:1: atom : ( NOT )? id= ID ;
 */
static void
atom(pARBACParser ctx)
{
    pANTLR3_COMMON_TOKEN    id;

    /* Initialize rule variables
     */

    id       = NULL;

    {
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:164:6: ( ( NOT )? id= ID )
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:164:8: ( NOT )? id= ID
        {
            {
                iNeg = 0;
            }


            // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:164:20: ( NOT )?
            {
                int alt11=2;
                switch ( LA(1) )
                {
                    case NOT:
                    	{
                    		alt11=1;
                    	}
                        break;
                }

                switch (alt11)
                {
            	case 1:
            	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:164:21: NOT
            	    {
            	         MATCHT(NOT, &FOLLOW_NOT_in_atom494);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleatomEx;
            	        }


            	        {
            	            iNeg=1;
            	        }


            	    }
            	    break;

                }
            }

            id = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_atom501);
            if  (HASEXCEPTION())
            {
                goto ruleatomEx;
            }


            {

                          if(iNeg == 0){
                            ca_array[ca_array_size-1].positive_role_array_size++;
                            ca_array[ca_array_size-1].positive_role_array = realloc(ca_array[ca_array_size-1].positive_role_array, ca_array[ca_array_size-1].positive_role_array_size*sizeof(int));
                            ca_array[ca_array_size-1].positive_role_array[ca_array[ca_array_size-1].positive_role_array_size-1] = find_role_from_dict((id->getText(id))->chars);
                          }else{
                            ca_array[ca_array_size-1].negative_role_array_size++;
                            ca_array[ca_array_size-1].negative_role_array = realloc(ca_array[ca_array_size-1].negative_role_array, ca_array[ca_array_size-1].negative_role_array_size*sizeof(int));
                            ca_array[ca_array_size-1].negative_role_array[ca_array[ca_array_size-1].negative_role_array_size-1] = find_role_from_dict((id->getText(id))->chars);
                          }
                       
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleatomEx; /* Prevent compiler warnings */
    ruleatomEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end atom */

/**
 * $ANTLR start admin
 * /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:176:1: admin : 'ADMIN' (id= ID )* SEMI ;
 */
static void
admin(pARBACParser ctx)
{
    pANTLR3_COMMON_TOKEN    id;

    /* Initialize rule variables
     */

    id       = NULL;

    {
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:176:7: ( 'ADMIN' (id= ID )* SEMI )
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:176:9: 'ADMIN' (id= ID )* SEMI
        {
             MATCHT(12, &FOLLOW_12_in_admin511);
            if  (HASEXCEPTION())
            {
                goto ruleadminEx;
            }


            // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:176:17: (id= ID )*

            for (;;)
            {
                int alt12=2;
                switch ( LA(1) )
                {
                case ID:
                	{
                		alt12=1;
                	}
                    break;

                }

                switch (alt12)
                {
            	case 1:
            	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:176:18: id= ID
            	    {
            	        id = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_admin516);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleadminEx;
            	        }


            	        {

            	                                  admin_array_index_size++;
            	                                  admin_array_index = realloc(admin_array_index, admin_array_index_size*sizeof(int));
            	                                  admin_array_index[admin_array_index_size-1] = find_user_from_dict((id->getText(id))->chars);
            	                                  
            	        }


            	    }
            	    break;

            	default:
            	    goto loop12;	/* break out of the loop */
            	    break;
                }
            }
            loop12: ; /* Jump out to here if this rule does not match */


             MATCHT(SEMI, &FOLLOW_SEMI_in_admin521);
            if  (HASEXCEPTION())
            {
                goto ruleadminEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleadminEx; /* Prevent compiler warnings */
    ruleadminEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end admin */

/**
 * $ANTLR start spec
 * /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:182:1: spec : 'SPEC' id= ID spec_tail ;
 */
static void
spec(pARBACParser ctx)
{
    pANTLR3_COMMON_TOKEN    id;

    /* Initialize rule variables
     */

    id       = NULL;

    {
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:182:6: ( 'SPEC' id= ID spec_tail )
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:182:8: 'SPEC' id= ID spec_tail
        {
             MATCHT(19, &FOLLOW_19_in_spec551);
            if  (HASEXCEPTION())
            {
                goto rulespecEx;
            }


            id = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_spec555);
            if  (HASEXCEPTION())
            {
                goto rulespecEx;
            }


            {

                	goal_temp = malloc(strlen((id->getText(id))->chars)+1);
                	strcpy(goal_temp, (id->getText(id))->chars);

            }


            FOLLOWPUSH(FOLLOW_spec_tail_in_spec558);
            spec_tail(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulespecEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulespecEx; /* Prevent compiler warnings */
    rulespecEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end spec */

/**
 * $ANTLR start spec_tail
 * /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:187:1: spec_tail : (id= ID )? SEMI ;
 */
static void
spec_tail(pARBACParser ctx)
{
    pANTLR3_COMMON_TOKEN    id;

    /* Initialize rule variables
     */

    id       = NULL;

    {
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:188:2: ( (id= ID )? SEMI )
        // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:188:5: (id= ID )? SEMI
        {
            // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:188:5: (id= ID )?
            {
                int alt13=2;
                switch ( LA(1) )
                {
                    case ID:
                    	{
                    		alt13=1;
                    	}
                        break;
                }

                switch (alt13)
                {
            	case 1:
            	    // /home/trucnguyenlam/ides/antlr/workspace/ARBACFinal_Translate/src/ARBAC.g:188:6: id= ID
            	    {
            	        id = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_spec_tail571);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulespec_tailEx;
            	        }


            	        {

            	            			goal_user_index = find_user_from_dict(goal_temp);
            	            			goal_role_index = find_role_from_dict((id->getText(id))->chars);
            	            			free(goal_temp);
            	            			goal_temp = 0;
            	            			hasGoalUserMode = 1; // For translate
            	            		      
            	        }


            	    }
            	    break;

                }
            }

             MATCHT(SEMI, &FOLLOW_SEMI_in_spec_tail583);
            if  (HASEXCEPTION())
            {
                goto rulespec_tailEx;
            }


            {

                                    if(goal_temp != NULL)
                                    {
                                    	goal_role_index = find_role_from_dict(goal_temp);
                                    	free(goal_temp);                    	
                                    }
                                   
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulespec_tailEx; /* Prevent compiler warnings */
    rulespec_tailEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end spec_tail */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */






/* End of code
 * =============================================================================
 */
